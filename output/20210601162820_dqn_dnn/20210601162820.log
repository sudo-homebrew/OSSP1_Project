From /Users/sunghjopnam/Documents/GitHub/OSSP-Project/networks.py:26: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.

matplotlib data path: /Users/sunghjopnam/.pyenv/versions/3.7.10/lib/python3.7/site-packages/matplotlib/mpl-data
CONFIGDIR=/Users/sunghjopnam/.matplotlib
matplotlib version 3.4.2
interactive is False
platform is darwin
loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'google', 'logging', 'time', 'traceback', 'linecache', 'tokenize', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'token', 'weakref', '_weakrefset', 'collections.abc', 'string', '_string', 'threading', 'atexit', 'argparse', 'gettext', 'locale', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'settings', 'platform', 'subprocess', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'math', 'utils', 'datetime', '_datetime', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'ctypes', '_ctypes', 'ctypes._endian', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random.bit_generator', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'data_manager', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas._typing', 'mmap', 'typing', 'typing.io', 'typing.re', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'six', '__future__', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'calendar', 'dateutil.easter', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.properties', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'unicodedata', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'copy', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'dataclasses', 'gzip', 'zipfile', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pprint', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'tempfile', 'pandas._libs.testing', 'cmath', 'pandas._version', 'agent', 'learners', 'keras', 'keras.utils', 'keras.utils.np_utils', 'keras.utils.generic_utils', 'keras.utils.data_utils', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'tarfile', 'multiprocessing.pool', 'queue', '_queue', 'multiprocessing.util', 'six.moves.urllib', 'six.moves.urllib.error', 'urllib.error', 'urllib.response', 'six.moves.urllib.request', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', '_scproxy', 'keras.utils.io_utils', 'h5py', 'h5py._errors', 'h5py._hl', 'h5py._hl.compat', 'h5py.version', 'h5py.h5', '_cython_0_29_13', 'h5py.defs', 'h5py._objects', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.utils', 'h5py.h5py_warnings', 'h5py.h5z', 'h5py.h5a', 'h5py.h5s', 'h5py.h5p', 'h5py.h5ac', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl.filters', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'h5py._hl.attrs', 'uuid', '_uuid', 'keras.utils.conv_utils', 'keras.backend', 'keras.backend.common', 'keras.backend.tensorflow_backend', 'tensorflow', 'tensorflow._api', 'tensorflow.python', 'tensorflow.tools', 'tensorflow.core', 'tensorflow.compiler', 'tensorflow.lite', 'tensorflow.keras', 'tensorflow.contrib', 'tensorflow.compat', 'tensorflow.summary', 'tensorflow.examples', 'tensorflow.estimator', 'tensorflow_core', 'tensorflow_core.python', 'tensorflow_core.python.pywrap_tensorflow', 'tensorflow.python.platform', 'tensorflow.python.platform.self_check', 'tensorflow.python.platform.build_info', 'tensorflow.python.pywrap_tensorflow_internal', 'imp', 'swig_runtime_data4', '_pywrap_tensorflow_internal', 'tensorflow.python.util', 'tensorflow.python.util.deprecation', 'tensorflow.python.platform.tf_logging', 'tensorflow.python.util.tf_export', 'tensorflow.python.util.tf_decorator', 'tensorflow.python.util.tf_stack', 'tensorflow_core.python._tf_stack', 'tensorflow.python.util.tf_inspect', 'tensorflow.python.util.decorator_utils', 'tensorflow.python.util.is_in_graph_mode', 'tensorflow.python.util.tf_contextlib', 'tensorflow_core.core', 'tensorflow.core.framework', 'tensorflow.core.framework.graph_pb2', 'google.protobuf', 'google.protobuf.descriptor', 'google.protobuf.internal', 'google.protobuf.internal.api_implementation', 'google.protobuf.internal._api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.reflection', 'google.protobuf.message_factory', 'google.protobuf.descriptor_pool', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.pyext.cpp_message', 'google.protobuf.symbol_database', 'tensorflow.core.framework.node_def_pb2', 'tensorflow.core.framework.attr_value_pb2', 'tensorflow.core.framework.tensor_pb2', 'tensorflow.core.framework.resource_handle_pb2', 'tensorflow.core.framework.tensor_shape_pb2', 'google.protobuf.internal.well_known_types', 'tensorflow.core.framework.types_pb2', 'tensorflow.core.framework.function_pb2', 'tensorflow.core.framework.op_def_pb2', 'tensorflow.core.framework.versions_pb2', 'tensorflow.core.framework.summary_pb2', 'tensorflow.core.protobuf', 'tensorflow.core.protobuf.meta_graph_pb2', 'google.protobuf.any_pb2', 'tensorflow.core.protobuf.saved_object_graph_pb2', 'tensorflow.core.protobuf.trackable_object_graph_pb2', 'tensorflow.core.protobuf.struct_pb2', 'tensorflow.core.framework.variable_pb2', 'tensorflow.core.protobuf.saver_pb2', 'tensorflow.core.protobuf.config_pb2', 'tensorflow.core.framework.cost_graph_pb2', 'tensorflow.core.framework.step_stats_pb2', 'tensorflow.core.framework.allocation_description_pb2', 'tensorflow.core.framework.tensor_description_pb2', 'tensorflow.core.protobuf.cluster_pb2', 'tensorflow.core.protobuf.debug_pb2', 'tensorflow.core.protobuf.rewriter_config_pb2', 'tensorflow.core.protobuf.verifier_config_pb2', 'tensorflow.core.protobuf.tensorflow_server_pb2', 'tensorflow.core.util', 'tensorflow.core.util.event_pb2', 'tensorflow.python.framework', 'tensorflow.python.framework.framework_lib', 'tensorflow.python.framework.device', 'tensorflow_core.python.tf2', 'tensorflow.python.framework.device_spec', 'tensorflow.python.framework.ops', 'tensorflow.python.eager', 'tensorflow.python.eager.context', 'tensorflow.python.eager.executor', 'tensorflow.python.eager.monitoring', 'tensorflow.python.framework.c_api_util', 'tensorflow.core.framework.api_def_pb2', 'tensorflow.python.util.compat', 'tensorflow.python.eager.core', 'tensorflow.python.framework.errors', 'tensorflow.python.framework.errors_impl', 'tensorflow.core.lib', 'tensorflow.core.lib.core', 'tensorflow.core.lib.core.error_codes_pb2', 'tensorflow.python.framework.error_interpolation', 'tensorflow.core.protobuf.graph_debug_info_pb2', 'tensorflow.python.eager.tape', 'tensorflow.python.util.lazy_loader', 'tensorflow.python.framework.composite_tensor', 'tensorflow.python.util.nest', 'tensorflow.python.framework.dtypes', 'tensorflow.python.framework.indexed_slices', 'tensorflow.python.framework.tensor_conversion_registry', 'tensorflow.python.framework.tensor_like', 'tensorflow.python.framework.tensor_shape', 'tensorflow.python.framework.type_spec', 'tensorflow.python.framework.op_def_registry', 'tensorflow.python.framework.registry', 'tensorflow.python.framework.traceable_stack', 'tensorflow.python.framework.versions', 'tensorflow.python.ops', 'tensorflow.python.ops.control_flow_util', 'tensorflow.python.platform.app', 'absl', 'absl.app', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'absl.command_name', 'absl.flags', 'getopt', 'absl.flags._argument_parser', 'absl.flags._helpers', 'fcntl', 'termios', 'absl.flags._defines', 'absl.flags._exceptions', 'absl.flags._flag', 'absl._collections_abc', 'absl.flags._flagvalues', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'absl.flags._validators', 'absl.logging', 'getpass', 'timeit', 'absl.logging.converter', 'faulthandler', 'tensorflow.python.platform.flags', 'tensorflow.python.util.function_utils', 'tensorflow.python.util.lock_util', 'tensorflow.python.util.memory', 'tensorflow.python.util.object_identity', 'tensorflow.python.framework.sparse_tensor', 'tensorflow.python.framework.tensor_spec', 'tensorflow.python.framework.common_shapes', 'tensorflow.python.framework.cpp_shape_inference_pb2', 'tensorflow.python.framework.tensor_util', 'tensorflow.python.framework.fast_tensor_util', 'tensorflow.python.ops.gen_sparse_ops', 'tensorflow.python.eager.execute', 'google.protobuf.text_format', 'encodings.raw_unicode_escape', 'encodings.unicode_escape', 'google.protobuf.internal.decoder', 'google.protobuf.internal.encoder', 'google.protobuf.internal.wire_format', 'google.protobuf.internal.type_checkers', 'tensorflow.python.framework.op_def_library', 'tensorflow.python.framework.op_callbacks', 'tensorflow.python.util.dispatch', 'tensorflow_core.tools', 'tensorflow.tools.docs', 'tensorflow.tools.docs.doc_controls', 'tensorflow.python.framework.random_seed', 'tensorflow.python.framework.importer', 'tensorflow.python.framework.function', 'tensorflow.python.framework.graph_to_function_def', 'tensorflow.python.ops.array_ops', 'tensorflow.python.compat', 'tensorflow.python.compat.compat', 'tensorflow.python.framework.constant_op', 'tensorflow.python.ops.gen_array_ops', 'tensorflow.python.ops.gen_math_ops', 'tensorflow.python.ops.resource_variable_ops', 'tensorflow.python.ops.gen_logging_ops', 'tensorflow.python.ops.gen_resource_variable_ops', 'tensorflow.python.ops.gen_state_ops', 'tensorflow.python.ops.math_ops', 'tensorflow.python.framework.graph_util', 'tensorflow.python.framework.graph_util_impl', 'tensorflow.python.ops.gen_data_flow_ops', 'tensorflow.python.ops.gen_nn_ops', 'tensorflow.python.ops.state_ops', 'tensorflow.python.ops.variables', 'tensorflow.python.ops.control_flow_ops', 'tensorflow.core.protobuf.control_flow_pb2', 'tensorflow.python.ops.gen_control_flow_ops', 'tensorflow.python.ops.tensor_array_ops', 'tensorflow.python.ops.list_ops', 'tensorflow.python.ops.gen_list_ops', 'tensorflow.python.util.tf_should_use', 'tensorflow.python.training', 'tensorflow.python.training.tracking', 'tensorflow.python.training.tracking.base', 'tensorflow.python.ops.gen_io_ops', 'tensorflow.python.training.saving', 'tensorflow.python.training.saving.saveable_object', 'tensorflow.python.ops.variable_scope', 'tensorflow.python.ops.init_ops', 'tensorflow.python.ops.gen_linalg_ops', 'tensorflow.python.ops.linalg_ops_impl', 'tensorflow.python.ops.random_ops', 'tensorflow.python.ops.gen_random_ops', 'tensorflow.python.framework.load_library', 'tensorflow.python.lib', 'tensorflow.python.lib.io', 'tensorflow.python.lib.io.file_io', 'tensorflow.python.framework.config', 'tensorflow.python.client', 'tensorflow.python.client.client_lib', 'tensorflow.python.client.session', 'tensorflow.python.ops.session_ops', 'tensorflow.python.training.experimental', 'tensorflow.python.training.experimental.mixed_precision_global_state', 'tensorflow.python.ops.standard_ops', 'tensorflow_core.python.autograph', 'tensorflow.python.autograph', 'tensorflow.python.autograph.operators', 'tensorflow.python.autograph.operators.control_flow', 'tensorflow.python.autograph.operators.py_builtins', 'tensorflow.python.autograph.utils', 'tensorflow.python.autograph.utils.context_managers', 'tensorflow.python.autograph.utils.misc', 'tensorflow.python.autograph.utils.py_func', 'tensorflow.python.ops.script_ops', 'tensorflow.python.eager.backprop', 'tensorflow.python.eager.imperative_grad', 'tensorflow.python.ops.unconnected_gradients', 'tensorflow.python.ops.check_ops', 'tensorflow.python.ops.gen_script_ops', 'tensorflow.python.autograph.utils.tensor_list', 'tensorflow.python.autograph.utils.testing', 'tensorflow.python.autograph.utils.type_check', 'tensorflow.python.autograph.utils.tensors', 'tensorflow.python.data', 'tensorflow.python.data.experimental', 'tensorflow.python.data.experimental.ops', 'tensorflow.python.data.experimental.ops.batching', 'tensorflow.python.data.ops', 'tensorflow.python.data.ops.dataset_ops', 'tensorflow.python.data.experimental.ops.distribute_options', 'tensorflow.python.data.util', 'tensorflow.python.data.util.options', 'tensorflow.python.data.experimental.ops.optimization_options', 'tensorflow.python.data.experimental.ops.stats_options', 'tensorflow.python.data.experimental.ops.stats_aggregator', 'tensorflow.python.ops.gen_experimental_dataset_ops', 'tensorflow.python.ops.summary_ops_v2', 'tensorflow.python.eager.profiler', 'tensorflow.python.platform.gfile', 'tensorflow.python.framework.smart_cond', 'tensorflow.python.ops.gen_summary_ops', 'tensorflow.python.ops.summary_op_util', 'tensorflow.python.training.training_util', 'tensorflow.python.framework.graph_io', 'tensorflow.python.data.experimental.ops.threading_options', 'tensorflow.python.data.ops.iterator_ops', 'tensorflow.python.data.ops.optional_ops', 'tensorflow.python.data.util.structure', 'tensorflow.python.data.util.nest', 'tensorflow.python.ops.ragged', 'tensorflow.python.ops.ragged.ragged_array_ops', 'tensorflow.python.ops.sort_ops', 'tensorflow.python.ops.nn_ops', 'tensorflow.python.ops.ragged.ragged_functional_ops', 'tensorflow.python.ops.ragged.ragged_config', 'tensorflow.python.ops.ragged.ragged_tensor', 'tensorflow.python.ops.gen_ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_tensor_value', 'tensorflow.python.ops.ragged.ragged_util', 'tensorflow.python.ops.gen_ragged_math_ops', 'tensorflow.python.ops.ragged.segment_id_ops', 'tensorflow.python.ops.ragged.ragged_math_ops', 'tensorflow.python.ops.ragged.ragged_batch_gather_ops', 'tensorflow.python.ops.ragged.ragged_gather_ops', 'tensorflow.python.ops.gen_ragged_array_ops', 'tensorflow.python.ops.ragged.ragged_batch_gather_with_default_op', 'tensorflow.python.ops.ragged.ragged_dispatch', 'tensorflow.python.ops.clip_ops', 'tensorflow.python.ops.data_flow_ops', 'tensorflow.python.lib.io.python_io', 'tensorflow.python.lib.io.tf_record', 'tensorflow.python.ops.gen_bitwise_ops', 'tensorflow.python.ops.parsing_ops', 'tensorflow.python.ops.gen_parsing_ops', 'tensorflow.python.ops.sparse_ops', 'tensorflow.python.ops.string_ops', 'tensorflow.python.ops.gen_string_ops', 'tensorflow.python.ops.ragged.ragged_concat_ops', 'tensorflow.python.ops.ragged.ragged_squeeze_op', 'tensorflow.python.ops.ragged.ragged_string_ops', 'tensorflow.python.ops.ragged.ragged_tensor_shape', 'tensorflow.python.ops.ragged.ragged_where_op', 'tensorflow.python.ops.ragged.ragged_operators', 'tensorflow.python.ops.ragged.ragged_getitem', 'tensorflow.python.ops.ragged.ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_factory_ops', 'tensorflow.python.ops.ragged.ragged_map_ops', 'tensorflow.python.ops.gen_dataset_ops', 'tensorflow.python.training.saver', 'tensorflow.python.framework.meta_graph', 'tensorflow.python.ops.io_ops', 'tensorflow.python.training.checkpoint_management', 'tensorflow.python.training.checkpoint_state_pb2', 'tensorflow.python.training.saving.saveable_object_util', 'tensorflow.python.data.util.random_seed', 'tensorflow.python.data.util.sparse', 'tensorflow.python.data.util.traverse', 'tensorflow.python.eager.function', 'tensorflow.python.eager.graph_only_ops', 'tensorflow.python.framework.func_graph', 'tensorflow.python.framework.auto_control_deps', 'tensorflow.python.ops.custom_gradient', 'tensorflow.python.ops.op_selector', 'tensorflow.python.ops.default_gradient', 'tensorflow.python.ops.functional_ops', 'tensorflow.python.ops.gen_functional_ops', 'tensorflow.python.ops.gradients_util', 'tensorflow.python.ops.control_flow_state', 'tensorflow.python.training.tracking.tracking', 'tensorflow.python.eager.def_function', 'tensorflow.python.eager.lift_to_graph', 'tensorflow.python.training.tracking.data_structures', 'wrapt', 'wrapt.wrappers', 'wrapt._wrappers', 'wrapt.decorators', 'wrapt.importer', 'tensorflow.python.saved_model', 'tensorflow.python.saved_model.revived_types', 'tensorflow.python.training.tracking.layer_utils', 'tensorflow.python.data.util.convert', 'tensorflow.python.data.experimental.ops.cardinality', 'tensorflow.python.data.experimental.ops.counter', 'tensorflow.python.data.experimental.ops.scan_ops', 'tensorflow.python.data.experimental.ops.enumerate_ops', 'tensorflow.python.data.experimental.ops.error_ops', 'tensorflow.python.data.experimental.ops.get_single_element', 'tensorflow.python.data.experimental.ops.grouping', 'tensorflow.python.data.experimental.ops.interleave_ops', 'tensorflow.python.data.experimental.ops.random_ops', 'tensorflow.python.data.ops.readers', 'tensorflow.python.ops.gen_stateless_random_ops', 'tensorflow.python.data.experimental.ops.iterator_ops', 'tensorflow.python.training.basic_session_run_hooks', 'tensorflow.python.client.timeline', 'tensorflow.python.training.session_run_hook', 'tensorflow.python.training.summary_io', 'tensorflow.python.summary', 'tensorflow.python.summary.summary_iterator', 'tensorflow.python.summary.writer', 'tensorflow.python.summary.writer.writer', 'tensorflow.python.summary.plugin_asset', 'tensorflow.python.summary.writer.event_file_writer', 'tensorflow.python.summary.writer.event_file_writer_v2', 'tensorflow.python.summary.writer.writer_cache', 'tensorflow.python.data.experimental.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.prefetching_ops', 'tensorflow.python.data.experimental.ops.readers', 'tensorflow.python.data.experimental.ops.shuffle_ops', 'tensorflow.python.data.experimental.ops.resampling', 'tensorflow.python.ops.logging_ops', 'tensorflow.python.data.experimental.ops.stats_ops', 'tensorflow.python.data.experimental.ops.take_while_ops', 'tensorflow.python.data.experimental.ops.unique', 'tensorflow.python.data.experimental.ops.writers', 'tensorflow.python.util.all_util', 'tensorflow.python.autograph.operators.special_values', 'tensorflow.python.autograph.utils.ag_logging', 'tensorflow.python.autograph.operators.data_structures', 'tensorflow.python.autograph.operators.exceptions', 'tensorflow.python.autograph.operators.logical', 'tensorflow.python.autograph.operators.slices', 'tensorflow.python.autograph.core', 'tensorflow.python.autograph.core.converter', 'tensorflow.python.autograph.pyct', 'tensorflow.python.autograph.pyct.anno', 'gast', 'gast.gast', 'gast.ast3', 'gast.astn', 'tensorflow.python.autograph.pyct.ast_util', 'tensorflow.python.autograph.pyct.parser', 'tensorflow.python.autograph.pyct.inspect_utils', 'tensorflow.python.autograph.pyct.cfg', 'tensorflow.python.autograph.pyct.compiler', 'astor', 'astor.code_gen', 'astor.op_util', 'astor.node_util', 'astor.string_repr', 'astor.source_repr', 'astor.file_util', 'astor.tree_walk', 'tensorflow.python.autograph.pyct.origin_info', 'difflib', 'tensorflow.python.autograph.pyct.pretty_printer', 'termcolor', 'tensorflow.python.autograph.pyct.qual_names', 'tensorflow.python.autograph.pyct.templates', 'tensorflow.python.autograph.pyct.transformer', 'tensorflow.python.autograph.pyct.static_analysis', 'tensorflow.python.autograph.pyct.static_analysis.activity', 'tensorflow.python.autograph.pyct.static_analysis.annos', 'tensorflow.python.autograph.pyct.static_analysis.liveness', 'tensorflow.python.autograph.pyct.static_analysis.reaching_definitions', 'tensorflow.python.autograph.impl', 'tensorflow.python.autograph.impl.api', 'tensorflow.python.autograph.core.ag_ctx', 'tensorflow.python.autograph.impl.conversion', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'tensorflow.python.autograph.converters', 'tensorflow.python.autograph.converters.arg_defaults', 'tensorflow.python.autograph.converters.asserts', 'tensorflow.python.autograph.converters.break_statements', 'tensorflow.python.autograph.converters.call_trees', 'tensorflow.python.autograph.converters.conditional_expressions', 'tensorflow.python.autograph.converters.continue_statements', 'tensorflow.python.autograph.converters.control_flow', 'tensorflow.python.autograph.converters.directives', 'tensorflow.python.autograph.lang', 'tensorflow.python.autograph.lang.directives', 'tensorflow.python.autograph.converters.function_scopes', 'tensorflow.python.autograph.converters.lists', 'tensorflow.python.autograph.converters.logical_expressions', 'tensorflow.python.autograph.converters.return_statements', 'tensorflow.python.autograph.converters.slices', 'tensorflow.python.autograph.core.config', 'tensorflow.python.autograph.core.config_lib', 'tensorflow.python.autograph.core.function_wrappers', 'tensorflow.python.autograph.core.naming', 'tensorflow.python.autograph.core.unsupported_features_checker', 'tensorflow.python.autograph.lang.special_functions', 'tensorflow.python.autograph.pyct.errors', 'tensorflow.python.ops.array_grad', 'tensorflow.python.ops.cudnn_rnn_grad', 'tensorflow.python.ops.gen_cudnn_rnn_ops', 'tensorflow.python.ops.data_flow_grad', 'tensorflow.python.ops.manip_grad', 'tensorflow.python.ops.manip_ops', 'tensorflow.python.ops.gen_manip_ops', 'tensorflow.python.ops.math_grad', 'tensorflow.python.ops.random_grad', 'tensorflow.python.ops.rnn_grad', 'tensorflow.python.ops.gen_rnn_ops', 'tensorflow.python.ops.sparse_grad', 'tensorflow.python.ops.state_grad', 'tensorflow.python.ops.tensor_array_grad', 'tensorflow.python.ops.special_math_ops', 'tensorflow_core.compiler', 'tensorflow.compiler.tf2xla', 'tensorflow.compiler.tf2xla.ops', 'tensorflow.compiler.tf2xla.ops.gen_xla_ops', 'tensorflow.python.ops.confusion_matrix', 'tensorflow.python.eager.wrap_function', 'tensorflow.python.saved_model.nested_structure_coder', 'tensorflow.python.distribute', 'tensorflow.python.distribute.cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.cluster_resolver', 'tensorflow.python.training.server_lib', 'tensorflow.python.distribute.cluster_resolver.gce_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.kubernetes_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.slurm_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tfconfig_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu_cluster_resolver', 'tensorflow.python.distribute.cross_device_ops', 'tensorflow.python.client.device_lib', 'tensorflow.core.framework.device_attributes_pb2', 'tensorflow.python.distribute.cross_device_utils', 'tensorflow.python.distribute.all_reduce', 'tensorflow.python.ops.nccl_ops', 'tensorflow.python.ops.gen_nccl_ops', 'tensorflow.python.distribute.values', 'tensorflow.python.distribute.device_util', 'tensorflow.python.distribute.distribute_lib', 'tensorflow.python.distribute.distribution_strategy_context', 'tensorflow.python.distribute.numpy_dataset', 'tensorflow.python.distribute.reduce_util', 'tensorflow.python.ops.losses', 'tensorflow.python.ops.losses.loss_reduction', 'tensorflow.python.ops.losses.losses_impl', 'tensorflow.python.ops.nn', 'tensorflow.python.ops.ctc_ops', 'tensorflow.python.ops.gen_ctc_ops', 'tensorflow.python.ops.inplace_ops', 'tensorflow.python.ops.linalg_ops', 'tensorflow.python.ops.map_fn', 'tensorflow.python.ops.nn_grad', 'tensorflow.python.ops.embedding_ops', 'tensorflow.python.ops.nn_impl', 'tensorflow.python.ops.candidate_sampling_ops', 'tensorflow.python.ops.gen_candidate_sampling_ops', 'tensorflow.python.ops.losses.util', 'tensorflow.python.ops.weights_broadcast_ops', 'tensorflow.python.ops.sets', 'tensorflow.python.ops.sets_impl', 'tensorflow.python.ops.gen_set_ops', 'tensorflow.python.ops.collective_ops', 'tensorflow.python.ops.gen_collective_ops', 'tensorflow.python.framework.kernels', 'tensorflow.core.framework.kernel_def_pb2', 'tensorflow.python.distribute.mirrored_strategy', 'tensorflow.python.distribute.input_lib', 'tensorflow.python.data.experimental.ops.distribute', 'tensorflow.python.data.ops.multi_device_iterator_ops', 'tensorflow.python.distribute.input_ops', 'tensorflow.python.distribute.multi_worker_util', 'tensorflow.python.distribute.distribute_coordinator_context', 'tensorflow.python.distribute.shared_variable_creator', 'tensorflow.python.training.coordinator', 'tensorflow.python.distribute.one_device_strategy', 'tensorflow.python.distribute.experimental', 'tensorflow.python.distribute.central_storage_strategy', 'tensorflow.python.distribute.parameter_server_strategy', 'tensorflow.python.training.device_setter', 'tensorflow.python.distribute.collective_all_reduce_strategy', 'tensorflow.python.distribute.tpu_strategy', 'tensorflow.python.tpu', 'tensorflow.python.tpu.device_assignment', 'tensorflow.python.tpu.topology', 'tensorflow.core.protobuf.tpu', 'tensorflow.core.protobuf.tpu.topology_pb2', 'tensorflow.python.tpu.tpu', 'tensorflow.core.protobuf.tpu.dynamic_padding_pb2', 'tensorflow.python.compiler', 'tensorflow.python.compiler.xla', 'tensorflow.python.compiler.xla.jit', 'tensorflow.python.compiler.xla.xla', 'tensorflow.compiler.jit', 'tensorflow.compiler.jit.ops', 'tensorflow.compiler.jit.ops.xla_ops', 'tensorflow.compiler.jit.ops.xla_ops_grad', 'tensorflow.python.distribute.summary_op_util', 'tensorflow.python.tpu.tpu_function', 'tensorflow.python.tpu.ops', 'tensorflow.python.tpu.ops.tpu_ops', 'tensorflow.python.ops.gen_tpu_ops', 'tensorflow.python.tpu.tpu_strategy_util', 'tensorflow.python.tpu.tpu_system_metadata', 'tensorflow.python.tpu.training_loop', 'tensorflow.python.tpu.tensor_tracer', 'tensorflow.python.tpu.tensor_tracer_flags', 'tensorflow.python.tpu.tensor_tracer_report', 'tensorflow.python.tpu.tensor_tracer_pb2', 'tensorflow.python.ops.batch_ops', 'tensorflow.python.ops.gen_batch_ops', 'tensorflow.python.ops.critical_section_ops', 'tensorflow.python.ops.gradients', 'tensorflow.python.ops.gradients_impl', 'tensorflow.python.ops.control_flow_grad', 'tensorflow.python.ops.image_grad', 'tensorflow.python.ops.gen_image_ops', 'tensorflow.python.ops.linalg_grad', 'tensorflow.python.ops.linalg', 'tensorflow.python.ops.linalg.linalg_impl', 'tensorflow.python.ops.optional_grad', 'tensorflow.python.ops.histogram_ops', 'tensorflow.python.ops.lookup_ops', 'tensorflow.python.ops.gen_lookup_ops', 'tensorflow.python.ops.numerics', 'tensorflow.python.ops.partitioned_variables', 'tensorflow.python.ops.proto_ops', 'tensorflow.python.ops.gen_decode_proto_ops', 'tensorflow.python.ops.gen_encode_proto_ops', 'tensorflow.python.ops.stateless_random_ops', 'tensorflow.python.ops.template', 'tensorflow.python.training.tracking.util', 'tensorflow.python.training.saving.functional_saver', 'tensorflow.python.training.tracking.graph_view', 'tensorflow.python.training.optimizer', 'tensorflow.python.training.slot_creator', 'tensorflow.python.ops.parallel_for', 'tensorflow.python.ops.parallel_for.control_flow_ops', 'tensorflow.python.ops.parallel_for.pfor', 'tensorflow.python.ops.bitwise_ops', 'tensorflow.python.ops.parallel_for.gradients', 'tensorflow.python.ops.initializers_ns', 'tensorflow_core.python.keras', 'tensorflow.python.keras', 'tensorflow.python.keras.activations', 'tensorflow.python.keras.backend', 'tensorflow.python.distribute.distribute_coordinator', 'tensorflow.python.training.monitored_session', 'tensorflow.python.ops.resources', 'tensorflow.python.summary.summary', 'google.protobuf.json_format', 'tensorflow.python.training.queue_runner', 'tensorflow.python.training.queue_runner_impl', 'tensorflow.core.protobuf.queue_runner_pb2', 'tensorflow.python.training.session_manager', 'tensorflow.python.keras.backend_config', 'tensorflow.python.ops.image_ops', 'tensorflow.python.ops.image_ops_impl', 'tensorflow.python.keras.utils', 'tensorflow.python.keras.utils.data_utils', 'tensorflow.python.keras.utils.generic_utils', 'tensorflow.python.keras.utils.io_utils', 'tensorflow.python.keras.utils.layer_utils', 'tensorflow.python.keras.utils.conv_utils', 'tensorflow.python.keras.utils.multi_gpu_utils', 'tensorflow.python.keras.engine', 'tensorflow.python.keras.engine.base_layer', 'tensorflow.python.keras.constraints', 'tensorflow.python.keras.initializers', 'tensorflow.python.ops.init_ops_v2', 'tensorflow.python.keras.regularizers', 'tensorflow.python.keras.engine.base_layer_utils', 'tensorflow.python.ops.control_flow_v2_func_graphs', 'tensorflow.python.keras.engine.input_spec', 'tensorflow.python.keras.engine.node', 'tensorflow.python.keras.mixed_precision', 'tensorflow.python.keras.mixed_precision.experimental', 'tensorflow.python.keras.mixed_precision.experimental.loss_scale_optimizer', 'tensorflow.python.keras.optimizer_v2', 'tensorflow.python.keras.optimizer_v2.optimizer_v2', 'tensorflow.python.keras.optimizer_v2.learning_rate_schedule', 'tensorflow.python.keras.utils.tf_utils', 'tensorflow.python.training.experimental.loss_scale', 'tensorflow.python.keras.mixed_precision.experimental.policy', 'tensorflow.python.keras.mixed_precision.experimental.autocast_variable', 'tensorflow.python.keras.saving', 'tensorflow.python.keras.saving.hdf5_format', 'tensorflow.python.keras.optimizers', 'tensorflow.python.keras.optimizer_v2.adadelta', 'tensorflow.python.training.training_ops', 'tensorflow.python.training.gen_training_ops', 'tensorflow.python.keras.optimizer_v2.adagrad', 'tensorflow.python.keras.optimizer_v2.adam', 'tensorflow.python.keras.optimizer_v2.adamax', 'tensorflow.python.keras.optimizer_v2.ftrl', 'tensorflow.python.keras.optimizer_v2.gradient_descent', 'tensorflow.python.keras.optimizer_v2.nadam', 'tensorflow.python.keras.optimizer_v2.rmsprop', 'tensorflow.python.keras.saving.model_config', 'yaml', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.loader', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.dumper', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.cyaml', 'yaml._yaml', 'tensorflow.python.keras.saving.saving_utils', 'tensorflow.python.keras.losses', 'tensorflow.python.keras.utils.losses_utils', 'tensorflow.python.util.serialization', 'tensorflow.python.keras.saving.save', 'tensorflow.python.keras.saving.saved_model', 'tensorflow.python.keras.saving.saved_model.load', 'tensorflow.python.keras.saving.saved_model.constants', 'tensorflow.python.keras.saving.saved_model.utils', 'tensorflow.python.keras.saving.saved_model.serialized_attributes', 'tensorflow.python.saved_model.load', 'tensorflow.python.saved_model.function_deserialization', 'tensorflow.python.framework.function_def_to_graph', 'tensorflow.python.saved_model.load_v1_in_v2', 'tensorflow.python.saved_model.loader_impl', 'tensorflow.core.protobuf.saved_model_pb2', 'tensorflow.python.saved_model.constants', 'tensorflow.python.saved_model.signature_def_utils', 'tensorflow.python.saved_model.signature_def_utils_impl', 'tensorflow.python.saved_model.signature_constants', 'tensorflow.python.saved_model.utils_impl', 'tensorflow.python.saved_model.signature_serialization', 'tensorflow.python.keras.saving.saved_model.save', 'tensorflow.python.saved_model.save', 'tensorflow.python.saved_model.builder_impl', 'tensorflow.python.saved_model.function_serialization', 'tensorflow.python.saved_model.tag_constants', 'tensorflow.python.keras.saving.saved_model_experimental', 'tensorflow.python.keras.utils.mode_keys', 'tensorflow.python.saved_model.model_utils', 'tensorflow.python.saved_model.model_utils.export_output', 'tensorflow.python.saved_model.model_utils.export_utils', 'tensorflow.python.saved_model.model_utils.mode_keys', 'tensorflow.python.saved_model.builder', 'tensorflow.python.module', 'tensorflow.python.module.module', 'tensorflow.python.keras.engine.input_layer', 'tensorflow.python.keras.distribute', 'tensorflow.python.keras.distribute.distributed_training_utils', 'tensorflow.python.keras.callbacks', 'tensorflow.python.keras.distribute.multi_worker_training_state', 'tensorflow.python.keras.metrics', 'tensorflow.python.keras.utils.metrics_utils', 'tensorflow.python.keras.engine.training_utils', 'tensorflow.python.framework.composite_tensor_utils', 'tensorflow.python.keras.engine.training', 'tensorflow.python.keras.engine.data_adapter', 'tensorflow.python.keras.engine.network', 'tensorflow.python.keras.engine.training_arrays', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy._lib._util', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', '_cython_0_29_23', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'tensorflow.python.keras.engine.training_distributed', 'tensorflow.python.keras.engine.partial_batch_padding_handler', 'tensorflow.python.keras.engine.training_eager', 'tensorflow.python.keras.engine.training_generator', 'tensorflow.python.keras.engine.training_v2', 'tensorflow.python.keras.engine.training_v2_utils', 'tensorflow.python.keras.utils.np_utils', 'tensorflow.python.keras.utils.vis_utils', 'tensorflow.python.keras.applications', 'keras_applications', 'keras_applications.vgg16', 'keras_applications.imagenet_utils', 'keras_applications.vgg19', 'keras_applications.resnet50', 'keras_applications.inception_v3', 'keras_applications.inception_resnet_v2', 'keras_applications.xception', 'keras_applications.mobilenet', 'keras_applications.mobilenet_v2', 'keras_applications.densenet', 'keras_applications.nasnet', 'keras_applications.resnet', 'keras_applications.resnet_common', 'keras_applications.resnet_v2', 'keras_applications.resnext', 'tensorflow.python.keras.layers', 'tensorflow.python.keras.layers.advanced_activations', 'tensorflow.python.keras.layers.convolutional', 'tensorflow.python.keras.layers.pooling', 'tensorflow.python.keras.layers.core', 'tensorflow.python.keras.layers.dense_attention', 'tensorflow.python.keras.layers.embeddings', 'tensorflow.python.keras.layers.local', 'tensorflow.python.keras.layers.merge', 'tensorflow.python.keras.layers.noise', 'tensorflow.python.keras.layers.normalization', 'tensorflow.python.keras.layers.normalization_v2', 'tensorflow.python.keras.layers.kernelized', 'tensorflow.python.keras.layers.recurrent', 'tensorflow.python.keras.layers.recurrent_v2', 'tensorflow.python.keras.layers.convolutional_recurrent', 'tensorflow.python.keras.layers.cudnn_recurrent', 'tensorflow.python.keras.layers.wrappers', 'tensorflow.python.keras.layers.rnn_cell_wrapper_v2', 'tensorflow.python.ops.rnn_cell_wrapper_impl', 'tensorflow.python.keras.layers.serialization', 'tensorflow.python.keras.models', 'tensorflow.python.keras.engine.sequential', 'tensorflow.python.keras.applications.densenet', 'tensorflow.python.keras.applications.imagenet_utils', 'tensorflow.python.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.applications.inception_v3', 'tensorflow.python.keras.applications.mobilenet', 'tensorflow.python.keras.applications.mobilenet_v2', 'tensorflow.python.keras.applications.nasnet', 'tensorflow.python.keras.applications.resnet', 'tensorflow.python.keras.applications.resnet_v2', 'tensorflow.python.keras.applications.vgg16', 'tensorflow.python.keras.applications.vgg19', 'tensorflow.python.keras.applications.xception', 'tensorflow.python.keras.callbacks_v1', 'tensorflow.python.keras.datasets', 'tensorflow.python.keras.datasets.boston_housing', 'tensorflow.python.keras.datasets.cifar10', 'tensorflow.python.keras.datasets.cifar', 'tensorflow.python.keras.datasets.cifar100', 'tensorflow.python.keras.datasets.fashion_mnist', 'tensorflow.python.keras.datasets.imdb', 'tensorflow.python.keras.preprocessing', 'keras_preprocessing', 'tensorflow.python.keras.preprocessing.image', 'keras_preprocessing.image', 'keras_preprocessing.image.affine_transformations', 'keras_preprocessing.image.utils', 'PIL', 'PIL._version', 'PIL.ImageEnhance', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.ImageFilter', 'PIL.ImageStat', 'scipy.ndimage', 'scipy.ndimage.filters', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy.ndimage._ni_docstrings', 'scipy._lib.doccer', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.ndimage.measurements', 'scipy.ndimage._ni_label', '_ni_label', 'scipy.ndimage.morphology', 'keras_preprocessing.image.dataframe_iterator', 'keras_preprocessing.image.iterator', 'keras_preprocessing.image.directory_iterator', 'keras_preprocessing.image.image_data_generator', 'keras_preprocessing.image.numpy_array_iterator', 'tensorflow.python.keras.preprocessing.sequence', 'keras_preprocessing.sequence', 'tensorflow.python.keras.preprocessing.text', 'keras_preprocessing.text', 'tensorflow.python.keras.datasets.mnist', 'tensorflow.python.keras.datasets.reuters', 'tensorflow.python.keras.estimator', 'tensorflow.python.keras.ops', 'tensorflow.python.keras.premade', 'tensorflow.python.keras.premade.linear', 'tensorflow.python.keras.premade.wide_deep', 'tensorflow.python.keras.wrappers', 'tensorflow.python.keras.wrappers.scikit_learn', 'tensorflow.python.feature_column', 'tensorflow.python.feature_column.feature_column_lib', 'tensorflow.python.feature_column.dense_features_v2', 'tensorflow.python.feature_column.dense_features', 'tensorflow.python.feature_column.feature_column_v2', 'tensorflow.python.feature_column.feature_column', 'tensorflow.python.feature_column.utils', 'tensorflow.python.layers', 'tensorflow.python.layers.base', 'tensorflow.python.training.checkpoint_utils', 'tensorflow.python.feature_column.sequence_feature_column', 'tensorflow.python.feature_column.serialization', 'tensorflow.python.layers.layers', 'tensorflow.python.layers.core', 'tensorflow.python.layers.convolutional', 'tensorflow.python.layers.pooling', 'tensorflow.python.layers.normalization', 'tensorflow.python.ops.gradient_checker_v2', 'tensorflow.python.ops.metrics', 'tensorflow.python.ops.metrics_impl', 'tensorflow.python.ops.stateful_random_ops', 'tensorflow.python.ops.gen_stateful_random_ops', 'tensorflow.python.ops.distributions', 'tensorflow.python.ops.distributions.distributions', 'tensorflow.python.ops.distributions.bernoulli', 'tensorflow.python.ops.distributions.distribution', 'tensorflow.python.ops.distributions.kullback_leibler', 'tensorflow.python.ops.distributions.util', 'tensorflow.python.ops.distributions.beta', 'tensorflow.python.ops.distributions.categorical', 'tensorflow.python.ops.distributions.dirichlet', 'tensorflow.python.ops.distributions.dirichlet_multinomial', 'tensorflow.python.ops.distributions.exponential', 'tensorflow.python.ops.distributions.gamma', 'tensorflow.python.ops.distributions.laplace', 'tensorflow.python.ops.distributions.special_math', 'tensorflow.python.ops.distributions.multinomial', 'tensorflow.python.ops.distributions.normal', 'tensorflow.python.ops.distributions.student_t', 'tensorflow.python.ops.distributions.uniform', 'tensorflow.python.ops.linalg.linalg', 'tensorflow.python.ops.linalg.adjoint_registrations', 'tensorflow.python.ops.linalg.linear_operator', 'tensorflow.python.ops.linalg.linear_operator_algebra', 'tensorflow.python.ops.linalg.linear_operator_util', 'tensorflow.python.ops.linalg.linear_operator_adjoint', 'tensorflow.python.ops.linalg.linear_operator_block_diag', 'tensorflow.python.ops.linalg.linear_operator_circulant', 'tensorflow.python.ops.signal', 'tensorflow.python.ops.signal.fft_ops', 'tensorflow.python.ops.gen_spectral_ops', 'tensorflow.python.ops.linalg.linear_operator_diag', 'tensorflow.python.ops.linalg.linear_operator_householder', 'tensorflow.python.ops.linalg.linear_operator_identity', 'tensorflow.python.ops.linalg.linear_operator_kronecker', 'tensorflow.python.ops.linalg.cholesky_registrations', 'tensorflow.python.ops.linalg.linear_operator_lower_triangular', 'tensorflow.python.ops.linalg.inverse_registrations', 'tensorflow.python.ops.linalg.linear_operator_inversion', 'tensorflow.python.ops.linalg.matmul_registrations', 'tensorflow.python.ops.linalg.linear_operator_composition', 'tensorflow.python.ops.linalg.linear_operator_zeros', 'tensorflow.python.ops.linalg.registrations_util', 'tensorflow.python.ops.linalg.solve_registrations', 'tensorflow.python.ops.linalg.linear_operator_full_matrix', 'tensorflow.python.ops.linalg.linear_operator_low_rank_update', 'tensorflow.python.ops.linalg.linear_operator_toeplitz', 'tensorflow.python.ops.losses.losses', 'tensorflow.python.ops.signal.signal', 'tensorflow.python.ops.signal.dct_ops', 'tensorflow.python.ops.signal.mel_ops', 'tensorflow.python.ops.signal.shape_ops', 'tensorflow.python.ops.signal.util_ops', 'fractions', 'tensorflow.python.ops.signal.mfcc_ops', 'tensorflow.python.ops.signal.reconstruction_ops', 'tensorflow.python.ops.signal.spectral_ops', 'tensorflow.python.ops.signal.window_ops', 'tensorflow.python.profiler', 'tensorflow.python.profiler.profiler', 'tensorflow.core.profiler', 'tensorflow.core.profiler.tfprof_log_pb2', 'tensorflow.core.profiler.tfprof_output_pb2', 'tensorflow.python.profiler.model_analyzer', 'tensorflow.core.profiler.tfprof_options_pb2', 'tensorflow.python.profiler.option_builder', 'tensorflow.python.profiler.tfprof_logger', 'tensorflow.python.profiler.internal', 'tensorflow.python.profiler.internal.flops_registry', 'tensorflow.python.saved_model.saved_model', 'tensorflow.python.saved_model.loader', 'tensorflow.python.saved_model.main_op', 'tensorflow.python.saved_model.main_op_impl', 'tensorflow.python.saved_model.utils', 'tensorflow.python.saved_model.simple_save', 'tensorflow.python.tpu.api', 'tensorflow.python.tpu.bfloat16', 'tensorflow.python.tpu.feature_column_v2', 'tensorflow.python.tpu.feature_column', 'tensorflow.python.tpu.tpu_embedding', 'tensorflow.core.protobuf.tpu.optimization_parameters_pb2', 'google.protobuf.wrappers_pb2', 'tensorflow.core.protobuf.tpu.tpu_embedding_configuration_pb2', 'tensorflow.core.protobuf.tpu.tpu_embedding_output_layout_pb2', 'tensorflow.python.tpu.tpu_optimizer', 'tensorflow.python.user_ops', 'tensorflow.python.user_ops.user_ops', 'tensorflow.python.ops.gen_user_ops', 'tensorflow.python.ops.gen_audio_ops', 'tensorflow.python.ops.gen_boosted_trees_ops', 'tensorflow.python.training.training', 'tensorflow.python.ops.sdca_ops', 'tensorflow.python.ops.gen_sdca_ops', 'tensorflow.python.training.adadelta', 'tensorflow.python.training.adagrad', 'tensorflow.python.training.adagrad_da', 'tensorflow.python.training.proximal_adagrad', 'tensorflow.python.training.adam', 'tensorflow.python.training.ftrl', 'tensorflow.python.training.experimental.loss_scale_optimizer', 'tensorflow.python.training.experimental.mixed_precision', 'tensorflow.python.training.momentum', 'tensorflow.python.training.moving_averages', 'tensorflow.python.training.rmsprop', 'tensorflow.python.training.gradient_descent', 'tensorflow.python.training.proximal_gradient_descent', 'tensorflow.python.training.sync_replicas_optimizer', 'tensorflow.python.training.input', 'tensorflow.python.layers.utils', 'tensorflow.python.training.basic_loops', 'tensorflow.python.training.tracking.python_state', 'tensorflow.python.training.supervisor', 'tensorflow.python.training.warm_starting_util', 'tensorflow.python.training.checkpoint_ops', 'tensorflow.python.ops.gen_checkpoint_ops', 'tensorflow.python.pywrap_tensorflow', 'tensorflow.core.example', 'tensorflow.core.example.example_pb2', 'tensorflow.core.example.feature_pb2', 'tensorflow.python.training.learning_rate_decay', 'tensorflow.python.platform.resource_loader', 'tensorflow.python.platform.sysconfig', 'tensorflow.python.platform.test', 'tensorflow.python.framework.test_util', 'absl.testing', 'absl.testing.parameterized', 'absl.testing.absltest', 'shlex', 'absl._enum_module', 'absl.testing._pretty_print_reporter', 'absl.third_party', 'absl.third_party.unittest3_backport', 'absl.third_party.unittest3_backport.case', 'absl.third_party.unittest3_backport.result', 'absl.testing.xml_reporter', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'unittest.mock', 'absl.testing._parameterized_async', 'tensorflow.python.ops.control_flow_util_v2', 'tensorflow.python.platform.googletest', 'tensorflow.python.platform.benchmark', 'tensorflow.core.util.test_log_pb2', 'tensorflow.python.util.protobuf', 'tensorflow.python.util.protobuf.compare', 'tensorflow.python.ops.gradient_checker', 'tensorflow.python.compat.v2_compat', 'tensorflow.python.ops.control_flow_v2_toggles', 'tensorflow.python.eager.remote', 'tensorflow.python.platform.remote_utils', 'tensorflow.python.ops.rnn', 'tensorflow.python.ops.rnn_cell_impl', 'tensorflow.python.ops.rnn_cell', 'tensorflow.python.tools', 'tensorflow.python.tools.module_util', 'tensorflow_core._api', 'tensorflow._api.v1', 'tensorflow._api.v1.app', 'tensorflow.python.util.module_wrapper', 'tensorflow.tools.compatibility', 'tensorflow.tools.compatibility.all_renames_v2', 'tensorflow.tools.compatibility.renames_v2', 'tensorflow._api.v1.audio', 'tensorflow._api.v1.autograph', 'tensorflow._api.v1.autograph.experimental', 'tensorflow._api.v1.bitwise', 'tensorflow._api.v1.compat', 'tensorflow._api.v1.compat.v1', 'tensorflow._api.v1.compat.v1.app', 'tensorflow._api.v1.compat.v1.audio', 'tensorflow._api.v1.compat.v1.autograph', 'tensorflow._api.v1.compat.v1.autograph.experimental', 'tensorflow._api.v1.compat.v1.bitwise', 'tensorflow._api.v1.compat.v1.compat', 'tensorflow._api.v1.compat.v1.config', 'tensorflow._api.v1.compat.v1.config.experimental', 'tensorflow._api.v1.compat.v1.config.optimizer', 'tensorflow._api.v1.compat.v1.config.threading', 'tensorflow._api.v1.compat.v1.data', 'tensorflow._api.v1.compat.v1.data.experimental', 'tensorflow._api.v1.compat.v1.debugging', 'tensorflow._api.v1.compat.v1.distribute', 'tensorflow._api.v1.compat.v1.distribute.cluster_resolver', 'tensorflow._api.v1.compat.v1.distribute.experimental', 'tensorflow._api.v1.compat.v1.distributions', 'tensorflow._api.v1.compat.v1.dtypes', 'tensorflow._api.v1.compat.v1.errors', 'tensorflow._api.v1.compat.v1.experimental', 'tensorflow._api.v1.compat.v1.feature_column', 'tensorflow._api.v1.compat.v1.gfile', 'tensorflow._api.v1.compat.v1.graph_util', 'tensorflow._api.v1.compat.v1.image', 'tensorflow._api.v1.compat.v1.initializers', 'tensorflow._api.v1.compat.v1.io', 'tensorflow._api.v1.compat.v1.io.gfile', 'tensorflow._api.v1.compat.v1.layers', 'tensorflow._api.v1.compat.v1.layers.experimental', 'tensorflow._api.v1.compat.v1.linalg', 'tensorflow._api.v1.compat.v1.lite', 'tensorflow._api.v1.compat.v1.lite.constants', 'tensorflow_core.lite', 'tensorflow.lite.python', 'tensorflow.lite.python.lite_constants', 'tensorflow.lite.toco', 'tensorflow.lite.toco.toco_flags_pb2', 'tensorflow.lite.toco.types_pb2', 'tensorflow._api.v1.compat.v1.lite.experimental', 'tensorflow._api.v1.compat.v1.lite.experimental.nn', 'tensorflow.lite.python.lite', 'tensorflow.lite.experimental', 'tensorflow.lite.experimental.examples', 'tensorflow.lite.experimental.examples.lstm', 'tensorflow.lite.experimental.examples.lstm.rnn', 'tensorflow.lite.python.op_hint', 'tensorflow.lite.experimental.examples.lstm.rnn_cell', 'tensorflow.lite.experimental.microfrontend', 'tensorflow.lite.experimental.microfrontend.python', 'tensorflow.lite.experimental.microfrontend.python.ops', 'tensorflow.lite.experimental.microfrontend.python.ops.audio_microfrontend_op', 'tensorflow.lite.experimental.microfrontend.ops', 'tensorflow.lite.experimental.microfrontend.ops.gen_audio_microfrontend_op', '4259f303abd9c6563476d3977e38810b', 'tensorflow.lite.experimental.tensorboard', 'tensorflow.lite.experimental.tensorboard.ops_util', 'tensorflow.lite.python.wrap_toco', 'tensorflow.lite.python.convert', 'tensorflow.lite.python.util', 'tensorflow.python.framework.convert_to_constants', 'tensorflow.python.grappler', 'tensorflow.python.grappler.tf_optimizer', 'tensorflow.python.grappler.cluster', 'tensorflow.core.grappler', 'tensorflow.core.grappler.costs', 'tensorflow.core.grappler.costs.op_performance_data_pb2', 'tensorflow.core.protobuf.device_properties_pb2', 'tensorflow.lite.toco.model_flags_pb2', 'tensorflow.lite.python.convert_saved_model', 'tensorflow.lite.python.interpreter', 'tensorflow.lite.python.optimize', 'tensorflow.lite.python.optimize.calibrator', 'tensorflow._api.v1.compat.v1.logging', 'tensorflow._api.v1.compat.v1.lookup', 'tensorflow._api.v1.compat.v1.lookup.experimental', 'tensorflow._api.v1.compat.v1.losses', 'tensorflow._api.v1.compat.v1.manip', 'tensorflow._api.v1.compat.v1.math', 'tensorflow._api.v1.compat.v1.metrics', 'tensorflow._api.v1.compat.v1.nest', 'tensorflow._api.v1.compat.v1.nn', 'tensorflow._api.v1.compat.v1.nn.rnn_cell', 'tensorflow._api.v1.compat.v1.profiler', 'tensorflow._api.v1.compat.v1.python_io', 'tensorflow._api.v1.compat.v1.quantization', 'tensorflow._api.v1.compat.v1.queue', 'tensorflow._api.v1.compat.v1.ragged', 'tensorflow._api.v1.compat.v1.random', 'tensorflow._api.v1.compat.v1.random.experimental', 'tensorflow._api.v1.compat.v1.raw_ops', 'tensorflow._api.v1.compat.v1.resource_loader', 'tensorflow._api.v1.compat.v1.saved_model', 'tensorflow._api.v1.compat.v1.saved_model.builder', 'tensorflow._api.v1.compat.v1.saved_model.constants', 'tensorflow._api.v1.compat.v1.saved_model.experimental', 'tensorflow._api.v1.compat.v1.saved_model.loader', 'tensorflow._api.v1.compat.v1.saved_model.main_op', 'tensorflow._api.v1.compat.v1.saved_model.signature_constants', 'tensorflow._api.v1.compat.v1.saved_model.signature_def_utils', 'tensorflow._api.v1.compat.v1.saved_model.tag_constants', 'tensorflow._api.v1.compat.v1.saved_model.utils', 'tensorflow._api.v1.compat.v1.sets', 'tensorflow._api.v1.compat.v1.signal', 'tensorflow._api.v1.compat.v1.sparse', 'tensorflow._api.v1.compat.v1.spectral', 'tensorflow._api.v1.compat.v1.strings', 'tensorflow._api.v1.compat.v1.summary', 'tensorflow._api.v1.compat.v1.sysconfig', 'tensorflow._api.v1.compat.v1.test', 'tensorflow._api.v1.compat.v1.tpu', 'tensorflow._api.v1.compat.v1.tpu.experimental', 'tensorflow._api.v1.compat.v1.train', 'tensorflow._api.v1.compat.v1.train.experimental', 'tensorflow._api.v1.compat.v1.train.queue_runner', 'tensorflow._api.v1.compat.v1.user_ops', 'tensorflow._api.v1.compat.v1.version', 'tensorflow._api.v1.compat.v1.xla', 'tensorflow._api.v1.compat.v1.xla.experimental', 'tensorflow_estimator', 'tensorflow_estimator._api', 'tensorflow_estimator._api.v1', 'tensorflow_estimator._api.v1.estimator', 'tensorflow_estimator._api.v1.estimator.experimental', 'tensorflow_estimator.python', 'tensorflow_estimator.python.estimator', 'tensorflow_estimator.python.estimator.canned', 'tensorflow_estimator.python.estimator.canned.dnn', 'tensorflow_estimator.python.estimator.estimator', 'tensorflow.python.distribute.estimator_training', 'tensorflow.python.training.evaluation', 'tensorflow.python.util.compat_internal', 'tensorflow_estimator.python.estimator.model_fn', 'tensorflow_estimator.python.estimator.mode_keys', 'tensorflow_estimator.python.estimator.run_config', 'tensorflow_estimator.python.estimator.util', 'tensorflow_estimator.python.estimator.export', 'tensorflow_estimator.python.estimator.export.export_lib', 'tensorflow_estimator.python.estimator.export.export', 'tensorflow_estimator.python.estimator.canned.head', 'tensorflow_estimator.python.estimator.canned.metric_keys', 'tensorflow_estimator.python.estimator.canned.prediction_keys', 'tensorflow_estimator.python.estimator.export.export_output', 'tensorflow_estimator.python.estimator.canned.optimizers', 'tensorflow_estimator.python.estimator.head', 'tensorflow_estimator.python.estimator.head.head_utils', 'tensorflow_estimator.python.estimator.head.binary_class_head', 'tensorflow_estimator.python.estimator.head.base_head', 'tensorflow_estimator.python.estimator.head.multi_class_head', 'tensorflow_estimator.python.estimator.head.regression_head', 'tensorflow_estimator.python.estimator.canned.kmeans', 'tensorflow.python.ops.clustering_ops', 'tensorflow.python.ops.gen_clustering_ops', 'tensorflow_estimator.python.estimator.canned.linear', 'tensorflow_estimator.python.estimator.canned.linear_optimizer', 'tensorflow_estimator.python.estimator.canned.linear_optimizer.python', 'tensorflow_estimator.python.estimator.canned.linear_optimizer.python.utils', 'tensorflow_estimator.python.estimator.canned.linear_optimizer.python.utils.sdca_ops', 'tensorflow_estimator.python.estimator.canned.linear_optimizer.python.utils.sharded_mutable_dense_hashtable', 'tensorflow_estimator.python.estimator.early_stopping', 'tensorflow_estimator.python.estimator.hooks', 'tensorflow_estimator.python.estimator.hooks.hooks', 'tensorflow_estimator._api.v1.estimator.export', 'tensorflow_estimator._api.v1.estimator.inputs', 'tensorflow_estimator.python.estimator.inputs', 'tensorflow_estimator.python.estimator.inputs.numpy_io', 'tensorflow_estimator.python.estimator.inputs.queues', 'tensorflow_estimator.python.estimator.inputs.queues.feeding_functions', 'tensorflow_estimator.python.estimator.inputs.queues.feeding_queue_runner', 'tensorflow_estimator.python.estimator.inputs.pandas_io', 'tensorflow_estimator._api.v1.estimator.tpu', 'tensorflow_estimator._api.v1.estimator.tpu.experimental', 'tensorflow_estimator.python.estimator.tpu', 'tensorflow_estimator.python.estimator.tpu._tpu_estimator_embedding', 'tensorflow_estimator.python.estimator.tpu.tpu_config', 'tensorflow_estimator.python.estimator.tpu.util', 'tensorflow_estimator.python.estimator.tpu.tpu_estimator', 'tensorflow.core.protobuf.tpu.compilation_result_pb2', 'tensorflow.compiler.xla', 'tensorflow.compiler.xla.service', 'tensorflow.compiler.xla.service.hlo_pb2', 'tensorflow.compiler.xla.xla_data_pb2', 'tensorflow.python.tpu.functional', 'tensorflow.python.tpu.preempted_hook', 'tensorflow.python.tpu.session_support', 'tensorflow.python.tpu.tpu_embedding_gradient', 'tensorflow.python.tpu.tpu_feed', 'tensorflow.compiler.xla.experimental', 'tensorflow.compiler.xla.experimental.xla_sharding', 'tensorflow.compiler.xla.experimental.xla_sharding.xla_sharding', 'tensorflow.python.tpu.tpu_sharding', 'tensorflow_estimator.python.estimator.tpu.error_handling', 'tensorflow_estimator.python.estimator.tpu.iteration_count_estimator', 'tensorflow_estimator.python.estimator.tpu.tpu_context', 'tensorflow_estimator.python.estimator.canned.baseline', 'tensorflow_estimator.python.estimator.canned.boosted_trees', 'tensorflow.core.kernels', 'tensorflow.core.kernels.boosted_trees', 'tensorflow.core.kernels.boosted_trees.boosted_trees_pb2', 'tensorflow.python.ops.boosted_trees_ops', 'tensorflow_estimator.python.estimator.canned.boosted_trees_utils', 'tensorflow.python.ops.cond_v2', 'tensorflow_estimator.python.estimator.canned.dnn_linear_combined', 'tensorflow_estimator.python.estimator.canned.parsing_utils', 'tensorflow_estimator.python.estimator.exporter', 'tensorflow_estimator.python.estimator.gc', 'tensorflow_estimator.python.estimator.extenders', 'tensorflow_estimator.python.estimator.head.multi_head', 'tensorflow_estimator.python.estimator.head.multi_label_head', 'tensorflow_estimator.python.estimator.hooks.basic_session_run_hooks', 'tensorflow_estimator.python.estimator.hooks.session_run_hook', 'tensorflow_estimator.python.estimator.training', 'tensorflow_estimator.python.estimator.api', 'tensorflow_estimator.python.estimator.api._v1', 'tensorflow_estimator.python.estimator.api._v1.estimator', 'tensorflow_estimator.python.estimator.api._v1.estimator.experimental', 'tensorflow_estimator.python.estimator.api._v1.estimator.export', 'tensorflow_estimator.python.estimator.api._v1.estimator.inputs', 'tensorflow_estimator.python.estimator.api._v1.estimator.tpu', 'tensorflow_estimator.python.estimator.api._v1.estimator.tpu.experimental', 'tensorflow.python.keras.api', 'tensorflow.python.keras.api.keras', 'tensorflow.python.keras.api.keras.activations', 'tensorflow.python.keras.api.keras.applications', 'tensorflow.python.keras.api.keras.applications.densenet', 'tensorflow.python.keras.api.keras.applications.imagenet_utils', 'tensorflow.python.keras.api.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.api.keras.applications.inception_v3', 'tensorflow.python.keras.api.keras.applications.mobilenet', 'tensorflow.python.keras.api.keras.applications.mobilenet_v2', 'tensorflow.python.keras.api.keras.applications.nasnet', 'tensorflow.python.keras.api.keras.applications.resnet', 'tensorflow.python.keras.api.keras.applications.resnet50', 'tensorflow.python.keras.api.keras.applications.resnet_v2', 'tensorflow.python.keras.api.keras.applications.vgg16', 'tensorflow.python.keras.api.keras.applications.vgg19', 'tensorflow.python.keras.api.keras.applications.xception', 'tensorflow.python.keras.api.keras.backend', 'tensorflow.python.keras.api.keras.callbacks', 'tensorflow.python.keras.api.keras.constraints', 'tensorflow.python.keras.api.keras.datasets', 'tensorflow.python.keras.api.keras.datasets.boston_housing', 'tensorflow.python.keras.api.keras.datasets.cifar10', 'tensorflow.python.keras.api.keras.datasets.cifar100', 'tensorflow.python.keras.api.keras.datasets.fashion_mnist', 'tensorflow.python.keras.api.keras.datasets.imdb', 'tensorflow.python.keras.api.keras.datasets.mnist', 'tensorflow.python.keras.api.keras.datasets.reuters', 'tensorflow.python.keras.api.keras.estimator', 'tensorflow.python.keras.api.keras.experimental', 'tensorflow.python.keras.api.keras.initializers', 'tensorflow.python.keras.api.keras.layers', 'tensorflow.python.keras.api.keras.losses', 'tensorflow.python.keras.api.keras.metrics', 'tensorflow.python.keras.api.keras.mixed_precision', 'tensorflow.python.keras.api.keras.mixed_precision.experimental', 'tensorflow.python.keras.api.keras.models', 'tensorflow.python.keras.api.keras.optimizers', 'tensorflow.python.keras.api.keras.optimizers.schedules', 'tensorflow.python.keras.api.keras.preprocessing', 'tensorflow.python.keras.api.keras.preprocessing.image', 'tensorflow.python.keras.api.keras.preprocessing.sequence', 'tensorflow.python.keras.api.keras.preprocessing.text', 'tensorflow.python.keras.api.keras.regularizers', 'tensorflow.python.keras.api.keras.utils', 'tensorflow.python.keras.api.keras.wrappers', 'tensorflow.python.keras.api.keras.wrappers.scikit_learn', 'tensorflow.python.keras.api._v1', 'tensorflow.python.keras.api._v1.keras', 'tensorflow.python.keras.api._v1.keras.activations', 'tensorflow.python.keras.api._v1.keras.applications', 'tensorflow.python.keras.api._v1.keras.applications.densenet', 'tensorflow.python.keras.api._v1.keras.applications.imagenet_utils', 'tensorflow.python.keras.api._v1.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.api._v1.keras.applications.inception_v3', 'tensorflow.python.keras.api._v1.keras.applications.mobilenet', 'tensorflow.python.keras.api._v1.keras.applications.mobilenet_v2', 'tensorflow.python.keras.api._v1.keras.applications.nasnet', 'tensorflow.python.keras.api._v1.keras.applications.resnet', 'tensorflow.python.keras.api._v1.keras.applications.resnet50', 'tensorflow.python.keras.api._v1.keras.applications.resnet_v2', 'tensorflow.python.keras.api._v1.keras.applications.vgg16', 'tensorflow.python.keras.api._v1.keras.applications.vgg19', 'tensorflow.python.keras.api._v1.keras.applications.xception', 'tensorflow.python.keras.api._v1.keras.backend', 'tensorflow.python.keras.api._v1.keras.callbacks', 'tensorflow.python.keras.api._v1.keras.constraints', 'tensorflow.python.keras.api._v1.keras.datasets', 'tensorflow.python.keras.api._v1.keras.datasets.boston_housing', 'tensorflow.python.keras.api._v1.keras.datasets.cifar10', 'tensorflow.python.keras.api._v1.keras.datasets.cifar100', 'tensorflow.python.keras.api._v1.keras.datasets.fashion_mnist', 'tensorflow.python.keras.api._v1.keras.datasets.imdb', 'tensorflow.python.keras.api._v1.keras.datasets.mnist', 'tensorflow.python.keras.api._v1.keras.datasets.reuters', 'tensorflow.python.keras.api._v1.keras.estimator', 'tensorflow.python.keras.api._v1.keras.experimental', 'tensorflow.python.keras.api._v1.keras.initializers', 'tensorflow.python.keras.api._v1.keras.layers', 'tensorflow.python.keras.api._v1.keras.losses', 'tensorflow.python.keras.api._v1.keras.metrics', 'tensorflow.python.keras.api._v1.keras.mixed_precision', 'tensorflow.python.keras.api._v1.keras.mixed_precision.experimental', 'tensorflow.python.keras.api._v1.keras.models', 'tensorflow.python.keras.api._v1.keras.optimizers', 'tensorflow.python.keras.api._v1.keras.optimizers.schedules', 'tensorflow.python.keras.api._v1.keras.preprocessing', 'tensorflow.python.keras.api._v1.keras.preprocessing.image', 'tensorflow.python.keras.api._v1.keras.preprocessing.sequence', 'tensorflow.python.keras.api._v1.keras.preprocessing.text', 'tensorflow.python.keras.api._v1.keras.regularizers', 'tensorflow.python.keras.api._v1.keras.utils', 'tensorflow.python.keras.api._v1.keras.wrappers', 'tensorflow.python.keras.api._v1.keras.wrappers.scikit_learn', 'tensorflow._api.v1.compat.v2', 'tensorflow._api.v1.compat.v2.audio', 'tensorflow._api.v1.compat.v2.autograph', 'tensorflow._api.v1.compat.v2.autograph.experimental', 'tensorflow._api.v1.compat.v2.bitwise', 'tensorflow._api.v1.compat.v2.compat', 'tensorflow._api.v1.compat.v2.config', 'tensorflow._api.v1.compat.v2.config.experimental', 'tensorflow._api.v1.compat.v2.config.optimizer', 'tensorflow._api.v1.compat.v2.config.threading', 'tensorflow._api.v1.compat.v2.data', 'tensorflow._api.v1.compat.v2.data.experimental', 'tensorflow._api.v1.compat.v2.debugging', 'tensorflow._api.v1.compat.v2.distribute', 'tensorflow._api.v1.compat.v2.distribute.cluster_resolver', 'tensorflow._api.v1.compat.v2.distribute.experimental', 'tensorflow._api.v1.compat.v2.dtypes', 'tensorflow._api.v1.compat.v2.errors', 'tensorflow._api.v1.compat.v2.experimental', 'tensorflow._api.v1.compat.v2.feature_column', 'tensorflow._api.v1.compat.v2.graph_util', 'tensorflow._api.v1.compat.v2.image', 'tensorflow._api.v1.compat.v2.io', 'tensorflow._api.v1.compat.v2.io.gfile', 'tensorflow._api.v1.compat.v2.linalg', 'tensorflow._api.v1.compat.v2.lite', 'tensorflow._api.v1.compat.v2.lite.experimental', 'tensorflow._api.v1.compat.v2.lookup', 'tensorflow._api.v1.compat.v2.lookup.experimental', 'tensorflow._api.v1.compat.v2.math', 'tensorflow._api.v1.compat.v2.nest', 'tensorflow._api.v1.compat.v2.nn', 'tensorflow._api.v1.compat.v2.quantization', 'tensorflow._api.v1.compat.v2.queue', 'tensorflow._api.v1.compat.v2.ragged', 'tensorflow._api.v1.compat.v2.random', 'tensorflow._api.v1.compat.v2.random.experimental', 'tensorflow._api.v1.compat.v2.raw_ops', 'tensorflow._api.v1.compat.v2.saved_model', 'tensorflow._api.v1.compat.v2.sets', 'tensorflow._api.v1.compat.v2.signal', 'tensorflow._api.v1.compat.v2.sparse', 'tensorflow._api.v1.compat.v2.strings', 'tensorflow._api.v1.compat.v2.summary', 'tensorflow._api.v1.compat.v2.summary.experimental', 'tensorflow._api.v1.compat.v2.sysconfig', 'tensorflow._api.v1.compat.v2.test', 'tensorflow._api.v1.compat.v2.tpu', 'tensorflow._api.v1.compat.v2.tpu.experimental', 'tensorflow._api.v1.compat.v2.train', 'tensorflow._api.v1.compat.v2.train.experimental', 'tensorflow._api.v1.compat.v2.version', 'tensorflow._api.v1.compat.v2.xla', 'tensorflow._api.v1.compat.v2.xla.experimental', 'tensorboard', 'tensorboard.lazy', 'tensorboard.version', 'tensorboard.summary', 'tensorboard.summary.v1', 'tensorboard.plugins', 'tensorboard.plugins.audio', 'tensorboard.plugins.audio.summary', 'tensorboard.util', 'tensorboard.util.encoder', 'tensorboard.util.op_evaluator', 'tensorboard.plugins.audio.metadata', 'tensorboard.compat', 'tensorboard.compat.proto', 'tensorboard.compat.proto.summary_pb2', 'tensorboard.compat.proto.tensor_pb2', 'tensorboard.compat.proto.resource_handle_pb2', 'tensorboard.compat.proto.tensor_shape_pb2', 'tensorboard.compat.proto.types_pb2', 'tensorboard.plugins.audio.plugin_data_pb2', 'tensorboard.util.tb_logging', 'tensorboard.plugins.audio.summary_v2', 'tensorboard.plugins.custom_scalar', 'tensorboard.plugins.custom_scalar.summary', 'tensorboard.plugins.custom_scalar.layout_pb2', 'tensorboard.plugins.custom_scalar.metadata', 'tensorboard.plugins.histogram', 'tensorboard.plugins.histogram.summary', 'tensorboard.plugins.histogram.metadata', 'tensorboard.plugins.histogram.plugin_data_pb2', 'tensorboard.plugins.histogram.summary_v2', 'tensorboard.util.tensor_util', 'tensorboard.compat.tensorflow_stub', 'tensorboard.compat.proto.config_pb2', 'tensorboard.compat.proto.cost_graph_pb2', 'tensorboard.compat.proto.graph_pb2', 'tensorboard.compat.proto.node_def_pb2', 'tensorboard.compat.proto.attr_value_pb2', 'tensorboard.compat.proto.function_pb2', 'tensorboard.compat.proto.op_def_pb2', 'tensorboard.compat.proto.versions_pb2', 'tensorboard.compat.proto.step_stats_pb2', 'tensorboard.compat.proto.allocation_description_pb2', 'tensorboard.compat.proto.tensor_description_pb2', 'tensorboard.compat.proto.cluster_pb2', 'tensorboard.compat.proto.debug_pb2', 'tensorboard.compat.proto.rewriter_config_pb2', 'tensorboard.compat.proto.verifier_config_pb2', 'tensorboard.compat.proto.event_pb2', 'tensorboard.compat.proto.meta_graph_pb2', 'tensorboard.compat.proto.saved_object_graph_pb2', 'tensorboard.compat.proto.trackable_object_graph_pb2', 'tensorboard.compat.proto.struct_pb2', 'tensorboard.compat.proto.variable_pb2', 'tensorboard.compat.proto.saver_pb2', 'tensorboard.compat.tensorflow_stub.dtypes', 'tensorboard.compat.tensorflow_stub.pywrap_tensorflow', 'tensorboard.compat.tensorflow_stub.errors', 'tensorboard.compat.tensorflow_stub.error_codes', 'tensorboard.compat.tensorflow_stub.io', 'tensorboard.compat.tensorflow_stub.io.gfile', 'tensorboard.compat.tensorflow_stub.compat', 'tensorboard.compat.tensorflow_stub.compat.v1', 'tensorboard.compat.tensorflow_stub.app', 'tensorboard.compat.tensorflow_stub.flags', 'tensorboard.compat.tensorflow_stub.tensor_shape', 'tensorboard.plugins.image', 'tensorboard.plugins.image.summary', 'tensorboard.plugins.image.metadata', 'tensorboard.plugins.image.plugin_data_pb2', 'tensorboard.plugins.image.summary_v2', 'tensorboard.plugins.pr_curve', 'tensorboard.plugins.pr_curve.summary', 'tensorboard.plugins.pr_curve.metadata', 'tensorboard.plugins.pr_curve.plugin_data_pb2', 'tensorboard.plugins.scalar', 'tensorboard.plugins.scalar.summary', 'tensorboard.plugins.scalar.metadata', 'tensorboard.plugins.scalar.plugin_data_pb2', 'tensorboard.plugins.scalar.summary_v2', 'tensorboard.plugins.text', 'tensorboard.plugins.text.summary', 'tensorboard.plugins.text.metadata', 'tensorboard.plugins.text.plugin_data_pb2', 'tensorboard.plugins.text.summary_v2', 'tensorboard.summary.v2', 'tensorboard.summary._tf', 'tensorboard.summary._tf.summary', 'tensorflow_estimator.python.estimator.api._v2', 'tensorflow_estimator.python.estimator.api._v2.estimator', 'tensorflow_estimator.python.estimator.api._v2.estimator.experimental', 'tensorflow_estimator.python.estimator.canned.rnn', 'tensorflow_estimator.python.estimator.head.sequential_head', 'tensorflow_estimator.python.estimator.api._v2.estimator.export', 'tensorflow.python.keras.api._v2', 'tensorflow.python.keras.api._v2.keras', 'tensorflow.python.keras.api._v2.keras.activations', 'tensorflow.python.keras.api._v2.keras.applications', 'tensorflow.python.keras.api._v2.keras.applications.densenet', 'tensorflow.python.keras.api._v2.keras.applications.imagenet_utils', 'tensorflow.python.keras.api._v2.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.api._v2.keras.applications.inception_v3', 'tensorflow.python.keras.api._v2.keras.applications.mobilenet', 'tensorflow.python.keras.api._v2.keras.applications.mobilenet_v2', 'tensorflow.python.keras.api._v2.keras.applications.nasnet', 'tensorflow.python.keras.api._v2.keras.applications.resnet', 'tensorflow.python.keras.api._v2.keras.applications.resnet50', 'tensorflow.python.keras.api._v2.keras.applications.resnet_v2', 'tensorflow.python.keras.api._v2.keras.applications.vgg16', 'tensorflow.python.keras.api._v2.keras.applications.vgg19', 'tensorflow.python.keras.api._v2.keras.applications.xception', 'tensorflow.python.keras.api._v2.keras.backend', 'tensorflow.python.keras.api._v2.keras.callbacks', 'tensorflow.python.keras.api._v2.keras.constraints', 'tensorflow.python.keras.api._v2.keras.datasets', 'tensorflow.python.keras.api._v2.keras.datasets.boston_housing', 'tensorflow.python.keras.api._v2.keras.datasets.cifar10', 'tensorflow.python.keras.api._v2.keras.datasets.cifar100', 'tensorflow.python.keras.api._v2.keras.datasets.fashion_mnist', 'tensorflow.python.keras.api._v2.keras.datasets.imdb', 'tensorflow.python.keras.api._v2.keras.datasets.mnist', 'tensorflow.python.keras.api._v2.keras.datasets.reuters', 'tensorflow.python.keras.api._v2.keras.estimator', 'tensorflow.python.keras.api._v2.keras.experimental', 'tensorflow.python.keras.api._v2.keras.initializers', 'tensorflow.python.keras.api._v2.keras.layers', 'tensorflow.python.keras.api._v2.keras.losses', 'tensorflow.python.keras.api._v2.keras.metrics', 'tensorflow.python.keras.api._v2.keras.mixed_precision', 'tensorflow.python.keras.api._v2.keras.mixed_precision.experimental', 'tensorflow.python.keras.api._v2.keras.models', 'tensorflow.python.keras.api._v2.keras.optimizers', 'tensorflow.python.keras.api._v2.keras.optimizers.schedules', 'tensorflow.python.keras.api._v2.keras.preprocessing', 'tensorflow.python.keras.api._v2.keras.preprocessing.image', 'tensorflow.python.keras.api._v2.keras.preprocessing.sequence', 'tensorflow.python.keras.api._v2.keras.preprocessing.text', 'tensorflow.python.keras.api._v2.keras.regularizers', 'tensorflow.python.keras.api._v2.keras.utils', 'tensorflow.python.keras.api._v2.keras.wrappers', 'tensorflow.python.keras.api._v2.keras.wrappers.scikit_learn', 'tensorflow._api.v1.config', 'tensorflow._api.v1.config.experimental', 'tensorflow._api.v1.config.optimizer', 'tensorflow._api.v1.config.threading', 'tensorflow._api.v1.data', 'tensorflow._api.v1.data.experimental', 'tensorflow._api.v1.debugging', 'tensorflow._api.v1.distribute', 'tensorflow._api.v1.distribute.cluster_resolver', 'tensorflow._api.v1.distribute.experimental', 'tensorflow._api.v1.distributions', 'tensorflow._api.v1.dtypes', 'tensorflow._api.v1.errors', 'tensorflow._api.v1.experimental', 'tensorflow._api.v1.feature_column', 'tensorflow._api.v1.gfile', 'tensorflow._api.v1.graph_util', 'tensorflow._api.v1.image', 'tensorflow._api.v1.initializers', 'tensorflow._api.v1.io', 'tensorflow._api.v1.io.gfile', 'tensorflow._api.v1.layers', 'tensorflow._api.v1.layers.experimental', 'tensorflow._api.v1.linalg', 'tensorflow._api.v1.lite', 'tensorflow._api.v1.lite.constants', 'tensorflow._api.v1.lite.experimental', 'tensorflow._api.v1.lite.experimental.nn', 'tensorflow._api.v1.logging', 'tensorflow._api.v1.lookup', 'tensorflow._api.v1.lookup.experimental', 'tensorflow._api.v1.losses', 'tensorflow._api.v1.manip', 'tensorflow._api.v1.math', 'tensorflow._api.v1.metrics', 'tensorflow._api.v1.nest', 'tensorflow._api.v1.nn', 'tensorflow._api.v1.nn.rnn_cell', 'tensorflow._api.v1.profiler', 'tensorflow._api.v1.python_io', 'tensorflow._api.v1.quantization', 'tensorflow._api.v1.queue', 'tensorflow._api.v1.ragged', 'tensorflow._api.v1.random', 'tensorflow._api.v1.random.experimental', 'tensorflow._api.v1.raw_ops', 'tensorflow._api.v1.resource_loader', 'tensorflow._api.v1.saved_model', 'tensorflow._api.v1.saved_model.builder', 'tensorflow._api.v1.saved_model.constants', 'tensorflow._api.v1.saved_model.experimental', 'tensorflow._api.v1.saved_model.loader', 'tensorflow._api.v1.saved_model.main_op', 'tensorflow._api.v1.saved_model.signature_constants', 'tensorflow._api.v1.saved_model.signature_def_utils', 'tensorflow._api.v1.saved_model.tag_constants', 'tensorflow._api.v1.saved_model.utils', 'tensorflow._api.v1.sets', 'tensorflow._api.v1.signal', 'tensorflow._api.v1.sparse', 'tensorflow._api.v1.spectral', 'tensorflow._api.v1.strings', 'tensorflow._api.v1.summary', 'tensorflow._api.v1.sysconfig', 'tensorflow._api.v1.test', 'tensorflow._api.v1.tpu', 'tensorflow._api.v1.tpu.experimental', 'tensorflow._api.v1.train', 'tensorflow._api.v1.train.experimental', 'tensorflow._api.v1.train.queue_runner', 'tensorflow._api.v1.user_ops', 'tensorflow._api.v1.version', 'tensorflow._api.v1.xla', 'tensorflow._api.v1.xla.experimental', 'tensorflow.python.util.deprecation_wrapper', 'keras.utils.layer_utils', 'keras.utils.vis_utils', 'keras.utils.multi_gpu_utils', 'keras.layers', 'keras.engine', 'keras.engine.input_layer', 'keras.engine.base_layer', 'keras.initializers', 'keras.legacy', 'keras.legacy.interfaces', 'keras.engine.network', 'keras.engine.saving', 'keras.optimizers', 'keras.engine.training', 'keras.engine.training_utils', 'keras.losses', 'keras.engine.training_arrays', 'keras.callbacks', 'keras.engine.training_generator', 'keras.metrics', 'keras.layers.merge', 'keras.layers.core', 'keras.activations', 'keras.regularizers', 'keras.constraints', 'keras.layers.convolutional', 'keras.layers.pooling', 'keras.legacy.layers', 'keras.layers.local', 'keras.layers.recurrent', 'keras.layers.cudnn_recurrent', 'keras.layers.normalization', 'keras.layers.embeddings', 'keras.layers.noise', 'keras.layers.advanced_activations', 'keras.layers.wrappers', 'keras.layers.convolutional_recurrent', 'keras.models', 'keras.engine.sequential', 'keras.applications', 'keras.applications.vgg16', 'keras.applications.vgg19', 'keras.applications.resnet50', 'keras.applications.inception_v3', 'keras.applications.inception_resnet_v2', 'keras.applications.xception', 'keras.applications.mobilenet', 'keras.applications.mobilenet_v2', 'keras.applications.densenet', 'keras.applications.nasnet', 'keras.datasets', 'keras.datasets.mnist', 'keras.datasets.imdb', 'keras.preprocessing', 'keras.preprocessing.image', 'keras.preprocessing.sequence', 'keras.preprocessing.text', 'keras.datasets.reuters', 'keras.datasets.cifar10', 'keras.datasets.cifar', 'keras.datasets.cifar100', 'keras.datasets.boston_housing', 'keras.datasets.fashion_mnist', 'keras.wrappers', 'environment', 'networks', 'tensorflow_core.keras', 'tensorflow.keras.models', 'tensorflow.keras.layers', 'tensorflow.keras.optimizers', 'tensorflow.keras.backend', 'visualizer', 'matplotlib', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib.cbook', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.colors', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib._enums', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'matplotlib.dates', 'dateutil.rrule', 'matplotlib.units']
CACHEDIR=/Users/sunghjopnam/.matplotlib
Using fontManager instance from /Users/sunghjopnam/.matplotlib/fontlist-v330.json
Loaded backend macosx version unknown.
Loaded backend MacOSX version unknown.
Loaded backend agg version unknown.
From /Users/sunghjopnam/.pyenv/versions/3.7.10/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
From /Users/sunghjopnam/.pyenv/versions/3.7.10/lib/python3.7/site-packages/tensorflow_core/python/keras/initializers.py:143: calling RandomNormal.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
[005930] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,123] DRT:0.1
[005930][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:181 #Sell:184 #Hold:129 #Stocks:44 PV:9,089,584 LC:0 Loss:0.000000 ET:1.6212
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-UltralightItalic.otf) italic normal 100 normal>) = 11.335
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-MediumItalic.otf) italic normal 500 normal>) = 11.145
findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'GungSeo' (Gungseouche.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact' (SF-Compact-Italic.ttf) italic normal 1000 normal>) = 11.62
findfont: score(<Font 'Nanum Gothic' (NanumGothic.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PSL Ornanong Pro' (Ornanong.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Tsukushi B Round Gothic' (TsukushiBMaruGothic.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STFangsong' (STFANGSO.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'HanziPen SC' (Hanzipen.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'SF Pro' (SF-Pro-Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Bold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Lantinghei SC' (Lantinghei.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Heavy.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Osaka' (OsakaMono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-BlackItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Bold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Toppan Bunkyu Mincho' (ToppanBunkyuMinchoPr6N-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'YuMincho' (YuMincho.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Klee' (Klee.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Hiragino Sans CNS' (Hiragino_Sans_CNS.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Toppan Bunkyu Gothic' (ToppanBunkyuGothicPr6N.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
findfont: score(<Font 'PilGi' (Pilgiche.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-ThinItalic.otf) italic normal 300 normal>) = 11.145
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Toppan Bunkyu Midashi Mincho' (ToppanBunkyuMidashiMinchoStdN-ExtraBold.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'LingWai TC' (LingWaiTC-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-BlackItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'YuKyokasho Yoko' (Kyokasho.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Baoli SC' (Baoli.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-LightItalic.otf) italic normal 300 normal>) = 11.145
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
findfont: score(<Font 'Osaka' (Osaka.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-SemiboldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Weibei SC' (WeibeiSC-Bold.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-LightItalic.otf) italic normal 300 normal>) = 11.145
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'LingWai SC' (LingWaiSC-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-HeavyItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-SemiboldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Light.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'SF Compact' (SF-Compact.ttf) normal normal 1000 normal>) = 10.62
findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wawati SC' (WawaSC-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Yuppy TC' (YuppyTC-Regular.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-UltralightItalic.otf) italic normal 100 normal>) = 11.335
findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-BoldItalic.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro' (SF-Pro.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-MediumItalic.otf) italic normal 500 normal>) = 11.145
findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-ThinItalic.otf) italic normal 200 normal>) = 11.24
findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Nanum Brush Script' (NanumScript.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kai' (Kai.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-LightItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Nanum Myeongjo' (NanumMyeongjo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Thin.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-RegularItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Weibei TC' (WeibeiTC-Bold.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PCMyungjo' (PCmyoungjo.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-RegularItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-ThinItalic.otf) italic normal 200 normal>) = 11.24
findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hannotate SC' (Hannotate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'YuGothic' (YuGothic-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple LiGothic' (AppleLiGothic-Medium.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
findfont: score(<Font 'SimSong' (SimSong.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STHeiti' (STHEITI.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple LiSung' (AppleLiSung-Light.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-BoldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Libian SC' (Libian.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'LiSong Pro' (LiSongPro.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Heavy.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Kaiti SC' (Kaiti.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STHeiti' (STXIHEI.ttf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-UltralightItalic.otf) italic normal 200 normal>) = 11.24
findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-BoldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-HeavyItalic.otf) italic normal 800 normal>) = 11.43
findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'HeadLineA' (HeadlineA.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-HeavyItalic.otf) italic normal 800 normal>) = 11.43
findfont: score(<Font 'Wawati TC' (WawaTC-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-BlackItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Xingkai SC' (Xingkai.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-SemiboldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Tsukushi A Round Gothic' (TsukushiAMaruGothic.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Yuanti SC' (Yuanti.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-RegularItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'BiauKai' (BiauKai.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Toppan Bunkyu Midashi Gothic' (ToppanBunkyuMidashiGothicStdN-ExtraBold.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'YuGothic' (YuGothic-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Hei' (Hei.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Bold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'LiHei Pro' (LiHeiPro.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-MediumItalic.otf) italic normal 500 normal>) = 11.145
findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Yuppy SC' (YuppySC-Regular.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/sunghjopnam/.pyenv/versions/3.7.10/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-UltralightItalic.otf) italic normal 100 normal>) = 11.335
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-MediumItalic.otf) italic normal 500 normal>) = 11.145
findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'GungSeo' (Gungseouche.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact' (SF-Compact-Italic.ttf) italic normal 1000 normal>) = 11.62
findfont: score(<Font 'Nanum Gothic' (NanumGothic.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PSL Ornanong Pro' (Ornanong.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Tsukushi B Round Gothic' (TsukushiBMaruGothic.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STFangsong' (STFANGSO.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'HanziPen SC' (Hanzipen.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'SF Pro' (SF-Pro-Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Bold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Lantinghei SC' (Lantinghei.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Heavy.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Osaka' (OsakaMono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-BlackItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Bold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Toppan Bunkyu Mincho' (ToppanBunkyuMinchoPr6N-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'YuMincho' (YuMincho.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Klee' (Klee.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Hiragino Sans CNS' (Hiragino_Sans_CNS.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Toppan Bunkyu Gothic' (ToppanBunkyuGothicPr6N.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
findfont: score(<Font 'PilGi' (Pilgiche.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-ThinItalic.otf) italic normal 300 normal>) = 11.145
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Toppan Bunkyu Midashi Mincho' (ToppanBunkyuMidashiMinchoStdN-ExtraBold.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'LingWai TC' (LingWaiTC-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-BlackItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'YuKyokasho Yoko' (Kyokasho.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Baoli SC' (Baoli.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-LightItalic.otf) italic normal 300 normal>) = 11.145
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
findfont: score(<Font 'Osaka' (Osaka.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-SemiboldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Weibei SC' (WeibeiSC-Bold.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-LightItalic.otf) italic normal 300 normal>) = 11.145
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'LingWai SC' (LingWaiSC-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-HeavyItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-SemiboldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Light.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'SF Compact' (SF-Compact.ttf) normal normal 1000 normal>) = 10.62
findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wawati SC' (WawaSC-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Yuppy TC' (YuppyTC-Regular.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-UltralightItalic.otf) italic normal 100 normal>) = 11.335
findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-BoldItalic.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro' (SF-Pro.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-MediumItalic.otf) italic normal 500 normal>) = 11.145
findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-ThinItalic.otf) italic normal 200 normal>) = 11.24
findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Nanum Brush Script' (NanumScript.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kai' (Kai.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-LightItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Nanum Myeongjo' (NanumMyeongjo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Thin.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-RegularItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Weibei TC' (WeibeiTC-Bold.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PCMyungjo' (PCmyoungjo.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Black.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-RegularItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-ThinItalic.otf) italic normal 200 normal>) = 11.24
findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hannotate SC' (Hannotate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'YuGothic' (YuGothic-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple LiGothic' (AppleLiGothic-Medium.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
findfont: score(<Font 'SimSong' (SimSong.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STHeiti' (STHEITI.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple LiSung' (AppleLiSung-Light.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-BoldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Libian SC' (Libian.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'LiSong Pro' (LiSongPro.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Ultralight.otf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Heavy.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Kaiti SC' (Kaiti.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STHeiti' (STXIHEI.ttf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-UltralightItalic.otf) italic normal 200 normal>) = 11.24
findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-BoldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-HeavyItalic.otf) italic normal 800 normal>) = 11.43
findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'HeadLineA' (HeadlineA.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Display' (SF-Pro-Display-HeavyItalic.otf) italic normal 800 normal>) = 11.43
findfont: score(<Font 'Wawati TC' (WawaTC-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-BlackItalic.otf) italic normal 900 normal>) = 11.525
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Light.otf) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Xingkai SC' (Xingkai.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Text' (SF-Compact-Text-SemiboldItalic.otf) italic normal 600 normal>) = 11.24
findfont: score(<Font 'Tsukushi A Round Gothic' (TsukushiAMaruGothic.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Yuanti SC' (Yuanti.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-RegularItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Heavy.otf) normal normal 800 normal>) = 10.43
findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'BiauKai' (BiauKai.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Toppan Bunkyu Midashi Gothic' (ToppanBunkyuMidashiGothicStdN-ExtraBold.otf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'YuGothic' (YuGothic-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Hei' (Hei.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-Bold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Display' (SF-Compact-Display-Medium.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'LiHei Pro' (LiHeiPro.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Text' (SF-Pro-Text-MediumItalic.otf) italic normal 500 normal>) = 11.145
findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Bold.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Compact Rounded' (SF-Compact-Rounded-Semibold.otf) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Yuppy SC' (YuppySC-Regular.otf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SF Pro Rounded' (SF-Pro-Rounded-Thin.otf) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/sunghjopnam/.pyenv/versions/3.7.10/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
[005930][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:172 #Sell:172 #Hold:150 #Stocks:153 PV:12,406,404 LC:0 Loss:0.000000 ET:1.4285
[005930][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:165 #Sell:166 #Hold:163 #Stocks:0 PV:14,444,264 LC:0 Loss:0.000000 ET:1.4463
[005930][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:173 #Hold:153 #Stocks:78 PV:10,034,961 LC:0 Loss:0.000000 ET:1.4678
[005930][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:169 #Sell:171 #Hold:154 #Stocks:103 PV:13,124,580 LC:0 Loss:0.000000 ET:1.4398
[005930][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:182 #Sell:178 #Hold:134 #Stocks:3 PV:10,054,368 LC:0 Loss:0.000000 ET:1.4284
[005930][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:174 #Hold:152 #Stocks:119 PV:9,696,650 LC:0 Loss:0.000000 ET:1.4283
[005930][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:170 #Sell:171 #Hold:153 #Stocks:125 PV:10,185,402 LC:0 Loss:0.000000 ET:1.4689
[005930][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:172 #Sell:183 #Hold:139 #Stocks:0 PV:9,246,274 LC:0 Loss:0.000000 ET:1.4017
[005930][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:161 #Hold:171 #Stocks:134 PV:10,905,261 LC:0 Loss:0.000000 ET:1.4542
[005930] Elapsed Time:35.8947 Max PV:14,444,264 #Win:7
[005930] mean pv : 10,918,775
[000660] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,84] DRT:0.1
[000660][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:159 #Sell:160 #Hold:175 #Stocks:77 PV:9,148,776 LC:0 Loss:0.000000 ET:1.6870
[000660][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:169 #Sell:171 #Hold:154 #Stocks:6 PV:12,565,090 LC:0 Loss:0.000000 ET:1.5780
[000660][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:165 #Sell:169 #Hold:160 #Stocks:113 PV:13,448,959 LC:0 Loss:0.000000 ET:1.4302
[000660][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:166 #Sell:174 #Hold:154 #Stocks:0 PV:10,030,841 LC:0 Loss:0.000000 ET:1.4335
[000660][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:164 #Sell:169 #Hold:161 #Stocks:44 PV:7,676,467 LC:0 Loss:0.000000 ET:1.3197
[000660][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:176 #Hold:150 #Stocks:0 PV:11,091,237 LC:0 Loss:0.000000 ET:1.3594
[000660][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:172 #Sell:176 #Hold:146 #Stocks:36 PV:10,584,199 LC:0 Loss:0.000000 ET:1.3756
[000660][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:164 #Sell:174 #Hold:156 #Stocks:47 PV:13,759,180 LC:0 Loss:0.000000 ET:1.3152
[000660][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:165 #Hold:167 #Stocks:110 PV:13,045,460 LC:0 Loss:0.000000 ET:1.3749
[000660][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:172 #Hold:154 #Stocks:0 PV:12,516,274 LC:0 Loss:0.000000 ET:1.2939
[000660] Elapsed Time:34.5856 Max PV:13,759,180 #Win:8
[000660] mean pv : 11,386,648
[051910] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,12] DRT:0.1
[051910][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:161 #Sell:166 #Hold:167 #Stocks:0 PV:13,800,517 LC:0 Loss:0.000000 ET:1.8763
[051910][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:165 #Sell:173 #Hold:156 #Stocks:4 PV:8,368,762 LC:0 Loss:0.000000 ET:1.3583
[051910][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:157 #Sell:164 #Hold:173 #Stocks:0 PV:12,204,645 LC:0 Loss:0.000000 ET:1.3688
[051910][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:155 #Sell:159 #Hold:180 #Stocks:0 PV:14,315,399 LC:0 Loss:0.000000 ET:1.6594
[051910][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:162 #Hold:172 #Stocks:14 PV:12,140,736 LC:0 Loss:0.000000 ET:1.4525
[051910][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:165 #Hold:169 #Stocks:0 PV:12,527,648 LC:0 Loss:0.000000 ET:1.3894
[051910][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:147 #Sell:147 #Hold:200 #Stocks:0 PV:10,147,309 LC:0 Loss:0.000000 ET:1.4214
[051910][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:145 #Sell:144 #Hold:205 #Stocks:16 PV:14,081,894 LC:0 Loss:0.000000 ET:1.3760
[051910][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:144 #Sell:149 #Hold:201 #Stocks:0 PV:10,185,739 LC:0 Loss:0.000000 ET:1.3420
[051910][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:149 #Sell:149 #Hold:196 #Stocks:8 PV:17,808,455 LC:0 Loss:0.000000 ET:1.4390
[051910] Elapsed Time:35.1818 Max PV:17,808,455 #Win:9
[051910] mean pv : 12,558,110
[005935] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,135] DRT:0.1
[005935][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:158 #Sell:154 #Hold:182 #Stocks:141 PV:16,274,800 LC:0 Loss:0.000000 ET:1.5809
[005935][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:171 #Hold:155 #Stocks:119 PV:8,795,625 LC:0 Loss:0.000000 ET:1.3235
[005935][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:175 #Sell:180 #Hold:139 #Stocks:0 PV:14,188,340 LC:0 Loss:0.000000 ET:1.4027
[005935][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:157 #Hold:175 #Stocks:57 PV:10,682,812 LC:0 Loss:0.000000 ET:1.4122
[005935][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:175 #Sell:179 #Hold:140 #Stocks:0 PV:9,792,498 LC:0 Loss:0.000000 ET:1.4038
[005935][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:177 #Sell:175 #Hold:142 #Stocks:166 PV:12,228,647 LC:0 Loss:0.000000 ET:1.3968
[005935][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:163 #Sell:162 #Hold:169 #Stocks:156 PV:11,508,021 LC:0 Loss:0.000000 ET:1.3227
[005935][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:175 #Sell:173 #Hold:146 #Stocks:68 PV:7,888,429 LC:0 Loss:0.000000 ET:1.4059
[005935][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:176 #Sell:174 #Hold:144 #Stocks:148 PV:10,926,369 LC:0 Loss:0.000000 ET:1.4203
[005935][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:171 #Sell:175 #Hold:148 #Stocks:134 PV:9,931,145 LC:0 Loss:0.000000 ET:1.6019
[005935] Elapsed Time:35.6270 Max PV:16,274,800 #Win:6
[005935] mean pv : 11,221,669
[035420] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,34] DRT:0.1
[035420][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:156 #Sell:165 #Hold:173 #Stocks:14 PV:10,635,254 LC:0 Loss:0.000000 ET:1.6258
[035420][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:172 #Hold:160 #Stocks:58 PV:17,151,774 LC:0 Loss:0.000000 ET:1.5241
[035420][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:161 #Sell:171 #Hold:162 #Stocks:56 PV:16,526,441 LC:0 Loss:0.000000 ET:1.5794
[035420][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:169 #Hold:163 #Stocks:2 PV:11,089,197 LC:0 Loss:0.000000 ET:1.4245
[035420][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:164 #Hold:168 #Stocks:48 PV:14,205,172 LC:0 Loss:0.000000 ET:1.3676
[035420][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:164 #Sell:173 #Hold:157 #Stocks:0 PV:9,848,815 LC:0 Loss:0.000000 ET:1.4765
[035420][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:171 #Hold:155 #Stocks:42 PV:12,302,233 LC:0 Loss:0.000000 ET:1.4603
[035420][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:169 #Sell:173 #Hold:152 #Stocks:30 PV:21,662,856 LC:0 Loss:0.000000 ET:1.3361
[035420][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:161 #Sell:167 #Hold:166 #Stocks:32 PV:13,574,389 LC:0 Loss:0.000000 ET:1.4285
[035420][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:156 #Sell:158 #Hold:180 #Stocks:43 PV:12,762,849 LC:0 Loss:0.000000 ET:1.4450
[035420] Elapsed Time:35.8112 Max PV:21,662,856 #Win:9
[035420] mean pv : 13,975,898
[035720] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,127] DRT:0.1
[035720][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:180 #Hold:152 #Stocks:248 PV:19,418,642 LC:0 Loss:0.000000 ET:1.7202
[035720][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:161 #Sell:174 #Hold:159 #Stocks:98 PV:12,599,391 LC:0 Loss:0.000000 ET:1.6068
[035720][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:162 #Sell:162 #Hold:170 #Stocks:148 PV:18,293,762 LC:0 Loss:0.000000 ET:1.5558
[035720][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:169 #Sell:165 #Hold:160 #Stocks:225 PV:17,759,577 LC:0 Loss:0.000000 ET:1.3764
[035720][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:165 #Sell:179 #Hold:150 #Stocks:0 PV:12,930,578 LC:0 Loss:0.000000 ET:1.5076
[035720][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:167 #Sell:175 #Hold:152 #Stocks:75 PV:16,092,225 LC:0 Loss:0.000000 ET:1.4534
[035720][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:160 #Hold:174 #Stocks:56 PV:11,881,005 LC:0 Loss:0.000000 ET:1.5155
[035720][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:152 #Sell:155 #Hold:187 #Stocks:291 PV:22,799,473 LC:0 Loss:0.000000 ET:1.3830
[035720][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:178 #Sell:178 #Hold:138 #Stocks:259 PV:20,277,151 LC:0 Loss:0.000000 ET:1.4710
[035720][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:178 #Sell:175 #Hold:141 #Stocks:161 PV:12,679,438 LC:0 Loss:0.000000 ET:1.5029
[035720] Elapsed Time:36.8407 Max PV:22,799,473 #Win:10
[035720] mean pv : 16,473,124
[005380] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,52] DRT:0.1
[005380][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:163 #Sell:172 #Hold:159 #Stocks:24 PV:11,683,595 LC:0 Loss:0.000000 ET:1.6774
[005380][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:165 #Sell:172 #Hold:157 #Stocks:0 PV:12,999,709 LC:0 Loss:0.000000 ET:1.3708
[005380][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:158 #Sell:163 #Hold:173 #Stocks:0 PV:11,014,126 LC:0 Loss:0.000000 ET:1.5566
[005380][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:164 #Sell:165 #Hold:165 #Stocks:22 PV:6,777,222 LC:0 Loss:0.000000 ET:1.4637
[005380][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:170 #Sell:181 #Hold:143 #Stocks:4 PV:8,320,153 LC:0 Loss:0.000000 ET:1.5696
[005380][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:173 #Sell:182 #Hold:139 #Stocks:45 PV:13,576,210 LC:0 Loss:0.000000 ET:1.4458
[005380][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:173 #Hold:161 #Stocks:38 PV:7,402,253 LC:0 Loss:0.000000 ET:1.5927
[005380][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:159 #Sell:162 #Hold:173 #Stocks:42 PV:8,077,064 LC:0 Loss:0.000000 ET:1.5585
[005380][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:161 #Sell:164 #Hold:169 #Stocks:57 PV:10,978,314 LC:0 Loss:0.000000 ET:1.5093
[005380][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:158 #Sell:163 #Hold:173 #Stocks:78 PV:14,997,254 LC:0 Loss:0.000000 ET:1.2863
[005380] Elapsed Time:37.1885 Max PV:14,997,254 #Win:6
[005380] mean pv : 10,582,590
[006400] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,15] DRT:0.1
[006400][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:175 #Sell:179 #Hold:140 #Stocks:6 PV:9,875,665 LC:0 Loss:0.000000 ET:1.8266
[006400][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:157 #Sell:160 #Hold:177 #Stocks:20 PV:12,657,017 LC:0 Loss:0.000000 ET:1.4628
[006400][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:166 #Sell:179 #Hold:149 #Stocks:10 PV:10,875,431 LC:0 Loss:0.000000 ET:1.5476
[006400][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:157 #Sell:167 #Hold:170 #Stocks:28 PV:17,798,245 LC:0 Loss:0.000000 ET:1.5124
[006400][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:165 #Sell:177 #Hold:152 #Stocks:1 PV:11,729,009 LC:0 Loss:0.000000 ET:1.5841
[006400][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:169 #Hold:157 #Stocks:0 PV:14,309,342 LC:0 Loss:0.000000 ET:1.5094
[006400][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:154 #Sell:156 #Hold:184 #Stocks:22 PV:14,044,149 LC:0 Loss:0.000000 ET:1.4714
[006400][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:166 #Hold:168 #Stocks:11 PV:18,318,896 LC:0 Loss:0.000000 ET:1.4526
[006400][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:158 #Sell:161 #Hold:175 #Stocks:0 PV:13,684,013 LC:0 Loss:0.000000 ET:1.4837
[006400][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:168 #Sell:176 #Hold:150 #Stocks:0 PV:15,092,244 LC:0 Loss:0.000000 ET:1.5617
[006400] Elapsed Time:37.9415 Max PV:18,318,896 #Win:9
[006400] mean pv : 13,838,401
[068270] RL:dqn Net:dnn LR:0.005 DF:0.9 TU:[1,27] DRT:0.1
[068270][Epoch 01/10] Epsilon:0.0000 #Expl.:0/494 #Buy:163 #Sell:164 #Hold:167 #Stocks:25 PV:9,161,454 LC:0 Loss:0.000000 ET:1.8666
[068270][Epoch 02/10] Epsilon:0.0000 #Expl.:0/494 #Buy:167 #Sell:166 #Hold:161 #Stocks:24 PV:10,751,560 LC:0 Loss:0.000000 ET:1.3871
[068270][Epoch 03/10] Epsilon:0.0000 #Expl.:0/494 #Buy:159 #Sell:169 #Hold:166 #Stocks:0 PV:7,336,914 LC:0 Loss:0.000000 ET:1.5930
[068270][Epoch 04/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:157 #Hold:177 #Stocks:0 PV:14,021,973 LC:0 Loss:0.000000 ET:1.4942
[068270][Epoch 05/10] Epsilon:0.0000 #Expl.:0/494 #Buy:155 #Sell:158 #Hold:181 #Stocks:12 PV:10,101,238 LC:0 Loss:0.000000 ET:1.5611
[068270][Epoch 06/10] Epsilon:0.0000 #Expl.:0/494 #Buy:157 #Sell:162 #Hold:175 #Stocks:18 PV:6,500,155 LC:0 Loss:0.000000 ET:1.4500
[068270][Epoch 07/10] Epsilon:0.0000 #Expl.:0/494 #Buy:155 #Sell:156 #Hold:183 #Stocks:12 PV:11,024,524 LC:0 Loss:0.000000 ET:1.5808
[068270][Epoch 08/10] Epsilon:0.0000 #Expl.:0/494 #Buy:163 #Sell:161 #Hold:170 #Stocks:6 PV:10,133,641 LC:0 Loss:0.000000 ET:1.4721
[068270][Epoch 09/10] Epsilon:0.0000 #Expl.:0/494 #Buy:155 #Sell:154 #Hold:185 #Stocks:38 PV:13,654,086 LC:0 Loss:0.000000 ET:1.4991
[068270][Epoch 10/10] Epsilon:0.0000 #Expl.:0/494 #Buy:160 #Sell:162 #Hold:172 #Stocks:33 PV:12,169,064 LC:0 Loss:0.000000 ET:1.4978
[068270] Elapsed Time:36.9547 Max PV:14,021,973 #Win:7
[068270] mean pv : 10,485,461
